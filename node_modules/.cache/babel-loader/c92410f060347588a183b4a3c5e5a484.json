{"ast":null,"code":"import React, { useRef } from 'react'; // vector add\n\nfunction addV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v + v2[i];\n  });\n} // vector substract\n\n\nfunction subV(v1, v2) {\n  return v1.map(function (v, i) {\n    return v - v2[i];\n  });\n}\n/**\r\n * Calculates distance\r\n * @param movement the difference between current and initial vectors\r\n * @returns distance\r\n */\n\n\nfunction calculateDistance(movement) {\n  return Math.hypot.apply(Math, movement);\n}\n\nfunction calculateAllGeometry(movement, delta) {\n  if (delta === void 0) {\n    delta = movement;\n  }\n\n  var dl = calculateDistance(delta);\n  var alpha = dl === 0 ? 0 : 1 / dl;\n  var direction = delta.map(function (v) {\n    return alpha * v;\n  });\n  var distance = calculateDistance(movement);\n  return {\n    distance: distance,\n    direction: direction\n  };\n}\n/**\r\n * Calculates all kinematics\r\n * @template T the expected vector type\r\n * @param movement the difference between current and initial vectors\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time difference between current and previous timestamps\r\n * @returns all kinematics\r\n */\n\n\nfunction calculateAllKinematics(movement, delta, dt) {\n  var dl = calculateDistance(delta);\n  var alpha = dl === 0 ? 0 : 1 / dl;\n  var beta = dt === 0 ? 0 : 1 / dt;\n  var velocity = beta * dl;\n  var velocities = delta.map(function (v) {\n    return beta * v;\n  });\n  var direction = delta.map(function (v) {\n    return alpha * v;\n  });\n  var distance = calculateDistance(movement);\n  return {\n    velocities: velocities,\n    velocity: velocity,\n    distance: distance,\n    direction: direction\n  };\n}\n/**\r\n * Because IE doesn't support `Math.sign` function, so we use the polyfill version of the function.\r\n * This polyfill function is suggested by Mozilla:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill\r\n * @param x target number\r\n */\n\n\nfunction sign(x) {\n  if (Math.sign) return Math.sign(x);\n  return Number(x > 0) - Number(x < 0) || +x;\n}\n\nfunction minMax(value, min, max) {\n  return Math.max(min, Math.min(value, max));\n} // Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\n\n\nfunction rubberband2(distance, constant) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5);\n}\n\nfunction rubberband(distance, dimension, constant) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant);\n  return distance * dimension * constant / (dimension + constant * distance);\n}\n\nfunction rubberbandIfOutOfBounds(position, min, max, constant) {\n  if (constant === void 0) {\n    constant = 0.15;\n  }\n\n  if (constant === 0) return minMax(position, min, max);\n  if (position < min) return -rubberband(min - position, max - min, constant) + min;\n  if (position > max) return +rubberband(position - max, max - min, constant) + max;\n  return position;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction noop() {}\n/**\r\n * TODO Beware that only optimized cases are covered in tests =)\r\n * TODO Need to cover general case as well\r\n *\r\n * @param fns\r\n */\n\n\nfunction chainFns() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  if (fns.length === 0) return noop;\n  if (fns.length === 1) return fns[0];\n  return function () {\n    var result;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(fns), _step; !(_step = _iterator()).done;) {\n      var fn = _step.value;\n      result = fn.apply(this, arguments) || result;\n    }\n\n    return result;\n  };\n}\n/**\r\n * Expects a simple value or 2D vector (an array with 2 elements) and\r\n * always returns 2D vector. If simple value is passed, returns a\r\n * vector with this value as both coordinates.\r\n *\r\n * @param value\r\n */\n\n\nfunction ensureVector(value, fallback) {\n  if (value === undefined) {\n    if (fallback === undefined) {\n      throw new Error('Must define fallback value if undefined is expected');\n    }\n\n    value = fallback;\n  }\n\n  if (Array.isArray(value)) return value;\n  return [value, value];\n}\n/**\r\n * Helper for defining a default value\r\n *\r\n * @param value\r\n * @param fallback\r\n */\n\n\nfunction assignDefault(value, fallback) {\n  return Object.assign({}, fallback, value || {});\n}\n/**\r\n * Resolves getters (functions) by calling them\r\n * If simple value is given it just passes through\r\n *\r\n * @param v\r\n */\n\n\nfunction valueFn(v) {\n  if (typeof v === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    } // @ts-ignore\n\n\n    return v.apply(void 0, args);\n  } else {\n    return v;\n  }\n}\n\nfunction resolveWith(config, resolvers) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var result = {};\n\n  for (var _i = 0, _Object$entries = Object.entries(resolvers); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _Object$entries[_i],\n        key = _Object$entries$_i[0],\n        resolver = _Object$entries$_i[1];\n\n    switch (typeof resolver) {\n      case 'function':\n        result[key] = resolver.call(result, config[key], key, config);\n        break;\n\n      case 'object':\n        result[key] = resolveWith(config[key], resolver);\n        break;\n\n      case 'boolean':\n        if (resolver) result[key] = config[key];\n        break;\n    }\n  }\n\n  return result;\n}\n\nvar DEFAULT_DRAG_DELAY = 180;\nvar DEFAULT_RUBBERBAND = 0.15;\nvar DEFAULT_SWIPE_VELOCITY = 0.5;\nvar DEFAULT_SWIPE_DISTANCE = 60;\nvar InternalGestureOptionsNormalizers = {\n  threshold: function threshold(value) {\n    if (value === void 0) {\n      value = 0;\n    }\n\n    return ensureVector(value);\n  },\n  rubberband: function rubberband(value) {\n    if (value === void 0) {\n      value = 0;\n    }\n\n    switch (value) {\n      case true:\n        return ensureVector(DEFAULT_RUBBERBAND);\n\n      case false:\n        return ensureVector(0);\n\n      default:\n        return ensureVector(value);\n    }\n  },\n  enabled: function enabled(value) {\n    if (value === void 0) {\n      value = true;\n    }\n\n    return value;\n  },\n  triggerAllEvents: function triggerAllEvents(value) {\n    if (value === void 0) {\n      value = false;\n    }\n\n    return value;\n  },\n  initial: function initial(value) {\n    if (value === void 0) {\n      value = 0;\n    }\n\n    if (typeof value === 'function') return value;\n    return ensureVector(value);\n  }\n};\n\nvar InternalCoordinatesOptionsNormalizers = /*#__PURE__*/_extends({}, InternalGestureOptionsNormalizers, {\n  axis: true,\n  lockDirection: function lockDirection(value) {\n    if (value === void 0) {\n      value = false;\n    }\n\n    return value;\n  },\n  bounds: function bounds(value) {\n    if (value === void 0) {\n      value = {};\n    }\n\n    if (typeof value === 'function') return function (state) {\n      return InternalCoordinatesOptionsNormalizers.bounds(value(state));\n    };\n    var _value2 = value,\n        _value2$left = _value2.left,\n        left = _value2$left === void 0 ? -Infinity : _value2$left,\n        _value2$right = _value2.right,\n        right = _value2$right === void 0 ? Infinity : _value2$right,\n        _value2$top = _value2.top,\n        top = _value2$top === void 0 ? -Infinity : _value2$top,\n        _value2$bottom = _value2.bottom,\n        bottom = _value2$bottom === void 0 ? Infinity : _value2$bottom;\n    return [[left, right], [top, bottom]];\n  }\n});\n\nvar isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;\nvar InternalGenericOptionsNormalizers = {\n  enabled: function enabled(value) {\n    if (value === void 0) {\n      value = true;\n    }\n\n    return value;\n  },\n  domTarget: true,\n  window: /*#__PURE__*/function (_window) {\n    function window(_x) {\n      return _window.apply(this, arguments);\n    }\n\n    window.toString = function () {\n      return _window.toString();\n    };\n\n    return window;\n  }(function (value) {\n    if (value === void 0) {\n      value = isBrowser ? window : undefined;\n    }\n\n    return value;\n  }),\n  eventOptions: function eventOptions(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$passive = _ref.passive,\n        passive = _ref$passive === void 0 ? true : _ref$passive,\n        _ref$capture = _ref.capture,\n        capture = _ref$capture === void 0 ? false : _ref$capture;\n\n    return {\n      passive: passive,\n      capture: capture\n    };\n  }\n};\n\nvar InternalDistanceAngleOptionsNormalizers = /*#__PURE__*/_extends({}, InternalGestureOptionsNormalizers, {\n  bounds: function bounds(_value, _key, _ref2) {\n    var _ref2$distanceBounds = _ref2.distanceBounds,\n        distanceBounds = _ref2$distanceBounds === void 0 ? {} : _ref2$distanceBounds,\n        _ref2$angleBounds = _ref2.angleBounds,\n        angleBounds = _ref2$angleBounds === void 0 ? {} : _ref2$angleBounds;\n\n    var _distanceBounds = function _distanceBounds(state) {\n      var D = assignDefault(valueFn(distanceBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [D.min, D.max];\n    };\n\n    var _angleBounds = function _angleBounds(state) {\n      var A = assignDefault(valueFn(angleBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [A.min, A.max];\n    };\n\n    if (typeof distanceBounds !== 'function' && typeof angleBounds !== 'function') return [_distanceBounds(), _angleBounds()];\n    return function (state) {\n      return [_distanceBounds(state), _angleBounds(state)];\n    };\n  }\n});\n\nvar InternalDragOptionsNormalizers = /*#__PURE__*/_extends({}, InternalCoordinatesOptionsNormalizers, {\n  threshold: function threshold(v, _k, _ref3) {\n    var _ref3$filterTaps = _ref3.filterTaps,\n        filterTaps = _ref3$filterTaps === void 0 ? false : _ref3$filterTaps,\n        _ref3$lockDirection = _ref3.lockDirection,\n        lockDirection = _ref3$lockDirection === void 0 ? false : _ref3$lockDirection,\n        _ref3$axis = _ref3.axis,\n        axis = _ref3$axis === void 0 ? undefined : _ref3$axis;\n    var A = ensureVector(v, filterTaps ? 3 : lockDirection ? 1 : axis ? 1 : 0);\n    this.filterTaps = filterTaps || A[0] + A[1] > 0;\n    return A;\n  },\n  swipeVelocity: function swipeVelocity(v) {\n    if (v === void 0) {\n      v = DEFAULT_SWIPE_VELOCITY;\n    }\n\n    return ensureVector(v);\n  },\n  swipeDistance: function swipeDistance(v) {\n    if (v === void 0) {\n      v = DEFAULT_SWIPE_DISTANCE;\n    }\n\n    return ensureVector(v);\n  },\n  delay: function delay(value) {\n    if (value === void 0) {\n      value = 0;\n    }\n\n    switch (value) {\n      case true:\n        return DEFAULT_DRAG_DELAY;\n\n      case false:\n        return 0;\n\n      default:\n        return value;\n    }\n  }\n});\n\nfunction getInternalGenericOptions(config) {\n  if (config === void 0) {\n    config = {};\n  } // TODO warn when passive is set to true and domTarget is undefined\n\n\n  return resolveWith(config, InternalGenericOptionsNormalizers);\n}\n\nfunction getInternalCoordinatesOptions(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  return resolveWith(config, InternalCoordinatesOptionsNormalizers);\n}\n\nfunction getInternalDistanceAngleOptions(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  return resolveWith(config, InternalDistanceAngleOptionsNormalizers);\n}\n\nfunction getInternalDragOptions(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  return resolveWith(config, InternalDragOptionsNormalizers);\n}\n\nfunction _buildMoveConfig(_ref) {\n  var domTarget = _ref.domTarget,\n      eventOptions = _ref.eventOptions,\n      window = _ref.window,\n      enabled = _ref.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.move = getInternalCoordinatesOptions(rest);\n  return opts;\n}\n\nfunction _buildHoverConfig(_ref2) {\n  var domTarget = _ref2.domTarget,\n      eventOptions = _ref2.eventOptions,\n      window = _ref2.window,\n      enabled = _ref2.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.hover = _extends({\n    enabled: true\n  }, rest);\n  return opts;\n}\n\nfunction _buildDragConfig(_ref3) {\n  var domTarget = _ref3.domTarget,\n      eventOptions = _ref3.eventOptions,\n      window = _ref3.window,\n      enabled = _ref3.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.drag = getInternalDragOptions(rest);\n  return opts;\n}\n\nfunction _buildPinchConfig(_ref4) {\n  var domTarget = _ref4.domTarget,\n      eventOptions = _ref4.eventOptions,\n      window = _ref4.window,\n      enabled = _ref4.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref4, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.pinch = getInternalDistanceAngleOptions(rest);\n  return opts;\n}\n\nfunction _buildScrollConfig(_ref5) {\n  var domTarget = _ref5.domTarget,\n      eventOptions = _ref5.eventOptions,\n      window = _ref5.window,\n      enabled = _ref5.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref5, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.scroll = getInternalCoordinatesOptions(rest);\n  return opts;\n}\n\nfunction _buildWheelConfig(_ref6) {\n  var domTarget = _ref6.domTarget,\n      eventOptions = _ref6.eventOptions,\n      window = _ref6.window,\n      enabled = _ref6.enabled,\n      rest = _objectWithoutPropertiesLoose(_ref6, [\"domTarget\", \"eventOptions\", \"window\", \"enabled\"]);\n\n  var opts = getInternalGenericOptions({\n    domTarget: domTarget,\n    eventOptions: eventOptions,\n    window: window,\n    enabled: enabled\n  });\n  opts.wheel = getInternalCoordinatesOptions(rest);\n  return opts;\n}\n\nfunction buildComplexConfig(config, actions) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  if (actions === void 0) {\n    actions = new Set();\n  }\n\n  var _config = config,\n      drag = _config.drag,\n      wheel = _config.wheel,\n      move = _config.move,\n      scroll = _config.scroll,\n      pinch = _config.pinch,\n      hover = _config.hover,\n      eventOptions = _config.eventOptions,\n      window = _config.window,\n      domTarget = _config.domTarget,\n      enabled = _config.enabled;\n  var mergedConfig = getInternalGenericOptions({\n    eventOptions: eventOptions,\n    window: window,\n    domTarget: domTarget,\n    enabled: enabled\n  });\n  if (actions.has('onDrag')) mergedConfig.drag = getInternalDragOptions(drag);\n  if (actions.has('onWheel')) mergedConfig.wheel = getInternalCoordinatesOptions(wheel);\n  if (actions.has('onScroll')) mergedConfig.scroll = getInternalCoordinatesOptions(scroll);\n  if (actions.has('onMove')) mergedConfig.move = getInternalCoordinatesOptions(move);\n  if (actions.has('onPinch')) mergedConfig.pinch = getInternalDistanceAngleOptions(pinch);\n  if (actions.has('onHover')) mergedConfig.hover = _extends({\n    enabled: true\n  }, hover);\n  return mergedConfig;\n}\n\nfunction getInitial(mixed) {\n  return _extends({\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    _bounds: [[-Infinity, Infinity], [-Infinity, Infinity]],\n    _lastEventType: undefined,\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    intentional: false,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined\n  }, mixed);\n}\n\nfunction getInitialState() {\n  var shared = {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false\n  };\n  var drag = getInitial({\n    axis: undefined,\n    xy: [0, 0],\n    vxvy: [0, 0],\n    velocity: 0,\n    distance: 0,\n    _isTap: true,\n    _delayedEvent: false,\n    _pointerId: undefined,\n    tap: false,\n    swipe: [0, 0]\n  });\n  var pinch = getInitial({\n    da: [0, 0],\n    vdva: [0, 0],\n    // @ts-ignore origin can never be passed as undefined in userland\n    origin: undefined,\n    turns: 0\n  });\n  var wheel = getInitial({\n    axis: undefined,\n    xy: [0, 0],\n    vxvy: [0, 0],\n    velocity: 0,\n    distance: 0\n  });\n  var move = getInitial({\n    axis: undefined,\n    xy: [0, 0],\n    vxvy: [0, 0],\n    velocity: 0,\n    distance: 0\n  });\n  var scroll = getInitial({\n    axis: undefined,\n    xy: [0, 0],\n    vxvy: [0, 0],\n    velocity: 0,\n    distance: 0\n  });\n  return {\n    shared: shared,\n    drag: drag,\n    pinch: pinch,\n    wheel: wheel,\n    move: move,\n    scroll: scroll\n  };\n}\n\nvar RecognizersMap = /*#__PURE__*/new Map();\n/**\r\n * @private\r\n * Recognizer abstract class.\r\n */\n\nvar Recognizer = /*#__PURE__*/function () {\n  /**\r\n   * Creates an instance of a gesture recognizer.\r\n   * @param stateKey drag, move, pinch, etc.\r\n   * @param controller the controller attached to the gesture\r\n   * @param [args] the args that should be passed to the gesture handler\r\n   */\n  function Recognizer(controller, args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = [];\n    }\n\n    this.controller = controller;\n    this.args = args;\n    this.debounced = true; // Convenience method to set a timeout for a given gesture\n\n    this.setTimeout = function (callback, ms) {\n      var _window;\n\n      if (ms === void 0) {\n        ms = 140;\n      }\n\n      clearTimeout(_this.controller.timeouts[_this.stateKey]);\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      _this.controller.timeouts[_this.stateKey] = (_window = window).setTimeout.apply(_window, [callback, ms].concat(args));\n    }; // Convenience method to clear a timeout for a given gesture\n\n\n    this.clearTimeout = function () {\n      clearTimeout(_this.controller.timeouts[_this.stateKey]);\n    };\n    /**\r\n     * Fires the gesture handler\r\n     */\n\n\n    this.fireGestureHandler = function (forceFlag) {\n      if (forceFlag === void 0) {\n        forceFlag = false;\n      }\n      /**\r\n       * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\r\n       * clean everything and don't do anything.\r\n       */\n\n\n      if (_this.state._blocked) {\n        // we need debounced gestures to end by themselves\n        if (!_this.debounced) {\n          _this.state._active = false;\n\n          _this.clean();\n        }\n\n        return null;\n      } // If the gesture has no intentional dimension, don't fire the handler.\n\n\n      if (!forceFlag && !_this.state.intentional && !_this.config.triggerAllEvents) return null;\n\n      if (_this.state.intentional) {\n        var prev_active = _this.state.active;\n        var next_active = _this.state._active;\n        _this.state.active = next_active;\n        _this.state.first = next_active && !prev_active;\n        _this.state.last = prev_active && !next_active;\n        _this.controller.state.shared[_this.ingKey] = next_active; // Sets dragging, pinching, etc. to the gesture active state\n      }\n\n      var state = _extends({}, _this.controller.state.shared, _this.state, _this.mapStateValues(_this.state)); // @ts-ignore\n\n\n      var newMemo = _this.handler(state); // Sets memo to the returned value of the handler (unless it's not undefined)\n\n\n      _this.state.memo = newMemo !== void 0 ? newMemo : _this.state.memo; // Cleans the gesture when the gesture is no longer active.\n\n      if (!_this.state._active) _this.clean();\n      return state;\n    };\n  } // Returns the gesture config\n\n\n  var _proto = Recognizer.prototype; // Convenience method to update the shared state\n\n  _proto.updateSharedState = function updateSharedState(sharedState) {\n    Object.assign(this.controller.state.shared, sharedState);\n  } // Convenience method to update the gesture state\n  ;\n\n  _proto.updateGestureState = function updateGestureState(gestureState) {\n    Object.assign(this.state, gestureState);\n  }\n  /**\r\n   * Returns state properties depending on the movement and state.\r\n   *\r\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\r\n   * below.\r\n   */\n  ;\n\n  _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {\n    return {\n      _intentional: _intentional,\n      _blocked: false\n    };\n  }\n  /**\r\n   * Returns basic movement properties for the gesture based on the next values and current state.\r\n   */\n  ;\n\n  _proto.getMovement = function getMovement(values) {\n    var _this$config = this.config,\n        initial = _this$config.initial,\n        bounds = _this$config.bounds,\n        rubberband = _this$config.rubberband,\n        T = _this$config.threshold;\n    var _this$state = this.state,\n        _bounds = _this$state._bounds,\n        _initial = _this$state._initial,\n        _active = _this$state._active,\n        wasIntentional = _this$state._intentional,\n        lastOffset = _this$state.lastOffset,\n        prevMovement = _this$state.movement;\n    var M = this.getInternalMovement(values, this.state);\n    var i0 = wasIntentional[0] === false ? getIntentionalDisplacement(M[0], T[0]) : wasIntentional[0];\n    var i1 = wasIntentional[1] === false ? getIntentionalDisplacement(M[1], T[1]) : wasIntentional[1]; // Get gesture specific state properties based on intentionality and movement.\n\n    var intentionalityCheck = this.checkIntentionality([i0, i1], M);\n\n    if (intentionalityCheck._blocked) {\n      return _extends({}, intentionalityCheck, {\n        _movement: M,\n        delta: [0, 0]\n      });\n    }\n\n    var _intentional = intentionalityCheck._intentional;\n    var _movement = M;\n\n    var __cachedBounds;\n\n    var __cachedInitial;\n\n    if (_intentional[0] !== false && wasIntentional[0] === false) {\n      __cachedInitial = valueFn(initial, this.state);\n      __cachedBounds = valueFn(bounds, this.state);\n      _initial[0] = __cachedInitial[0];\n      _bounds[0] = __cachedBounds[0];\n    }\n\n    if (_intentional[1] !== false && wasIntentional[1] === false) {\n      var _cachedInitial, _cachedBounds;\n\n      __cachedInitial = (_cachedInitial = __cachedInitial) != null ? _cachedInitial : valueFn(initial, this.state);\n      __cachedBounds = (_cachedBounds = __cachedBounds) != null ? _cachedBounds : valueFn(bounds, this.state);\n      _initial[1] = __cachedInitial[1];\n      _bounds[1] = __cachedBounds[1];\n    }\n    /**\r\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\r\n     * It is calculated from the actual movement minus the threshold.\r\n     */\n\n\n    var movement = [_intentional[0] !== false ? M[0] - _intentional[0] : _initial[0], _intentional[1] !== false ? M[1] - _intentional[1] : _initial[1]];\n    var offset = addV(movement, lastOffset);\n    /**\r\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\r\n     * and offset can return within their bounds.\r\n     */\n\n    var _rubberband = _active ? rubberband : [0, 0];\n\n    movement = computeRubberband(_bounds, addV(movement, _initial), _rubberband);\n    return _extends({}, intentionalityCheck, {\n      intentional: _intentional[0] !== false || _intentional[1] !== false,\n      _initial: _initial,\n      _movement: _movement,\n      movement: movement,\n      values: values,\n      offset: computeRubberband(_bounds, offset, _rubberband),\n      delta: subV(movement, prevMovement)\n    });\n  } // Cleans the gesture. Can be overriden by gestures.\n  ;\n\n  _proto.clean = function clean() {\n    this.clearTimeout();\n  };\n\n  _createClass(Recognizer, [{\n    key: \"config\",\n    get: function get() {\n      return this.controller.config[this.stateKey];\n    } // Is the gesture enabled\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this.controller.config.enabled && this.config.enabled;\n    } // Returns the controller state for a given gesture\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.controller.state[this.stateKey];\n    } // Returns the gesture handler\n\n  }, {\n    key: \"handler\",\n    get: function get() {\n      return this.controller.handlers[this.stateKey];\n    }\n  }]);\n\n  return Recognizer;\n}(); //--------------------------------------------\n\n\nfunction getIntentionalDisplacement(movement, threshold) {\n  if (Math.abs(movement) >= threshold) {\n    return sign(movement) * threshold;\n  } else {\n    return false;\n  }\n}\n\nfunction computeRubberband(bounds, _ref, _ref2) {\n  var Vx = _ref[0],\n      Vy = _ref[1];\n  var Rx = _ref2[0],\n      Ry = _ref2[1];\n  var _bounds$ = bounds[0],\n      X1 = _bounds$[0],\n      X2 = _bounds$[1],\n      _bounds$2 = bounds[1],\n      Y1 = _bounds$2[0],\n      Y2 = _bounds$2[1];\n  return [rubberbandIfOutOfBounds(Vx, X1, X2, Rx), rubberbandIfOutOfBounds(Vy, Y1, Y2, Ry)];\n}\n/**\r\n * Returns a generic, common payload for all gestures from an event.\r\n */\n\n\nfunction getGenericPayload(_ref3, event, isStartEvent) {\n  var state = _ref3.state,\n      args = _ref3.args;\n  var timeStamp = event.timeStamp,\n      _lastEventType = event.type;\n  var previous = state.values;\n  var elapsedTime = isStartEvent ? 0 : timeStamp - state.startTime;\n  return {\n    _lastEventType: _lastEventType,\n    event: event,\n    timeStamp: timeStamp,\n    elapsedTime: elapsedTime,\n    args: args,\n    previous: previous\n  };\n}\n/**\r\n * Returns the reinitialized start state for the gesture.\r\n * Should be common to all gestures.\r\n */\n\n\nfunction getStartGestureState(recognizer, values, event) {\n  var offset = recognizer.state.offset;\n  var startTime = event.timeStamp;\n  return _extends({}, getInitialState()[recognizer.stateKey], {\n    _active: true,\n    values: values,\n    initial: values,\n    offset: offset,\n    lastOffset: offset,\n    startTime: startTime\n  });\n}\n\nfunction partial(func, state) {\n  return function (event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    } // @ts-ignore\n\n\n    return func.call.apply(func, [this, _extends({}, state, {\n      event: event\n    })].concat(args));\n  };\n}\n/**\r\n * The controller will keep track of the state for all gestures and also keep\r\n * track of timeouts, and window listeners.\r\n */\n\n\nvar Controller = function Controller(classes) {\n  var _this = this;\n\n  this.classes = classes;\n\n  this.bind = function () {\n    var bindings = {};\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(_this.classes), _step; !(_step = _iterator()).done;) {\n      var RecognizerClass = _step.value;\n      new RecognizerClass(_this, args).addBindings(bindings);\n    } // we also add event bindings for native handlers\n\n\n    for (var _i = 0, _Object$entries = Object.entries(_this.nativeRefs); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _Object$entries[_i],\n          event = _Object$entries$_i[0],\n          handler = _Object$entries$_i[1];\n      addBindings(bindings, event, partial(handler, _extends({}, _this.state.shared, {\n        args: args\n      })));\n    }\n\n    if (_this.config.domTarget) {\n      // If config.domTarget is set we add event listeners to it and return the clean function.\n      return updateDomListeners(_this, bindings);\n    } else {\n      // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n      return getPropsListener(_this, bindings);\n    }\n  };\n\n  this.effect = function () {\n    if (_this.config.domTarget) _this.bind();\n    return _this.clean;\n  };\n  /**\r\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\r\n   */\n\n\n  this.clean = function () {\n    var domTarget = getDomTargetFromConfig(_this.config);\n    var eventOptions = _this.config.eventOptions;\n    if (domTarget) removeListeners(domTarget, takeAll(_this.domListeners), eventOptions);\n    Object.values(_this.timeouts).forEach(clearTimeout);\n    clearAllWindowListeners(_this);\n  };\n\n  this.state = getInitialState();\n  this.timeouts = {};\n  this.domListeners = [];\n  this.windowListeners = {};\n};\n\nfunction clearAllWindowListeners(controller) {\n  var _controller$config = controller.config,\n      el = _controller$config.window,\n      eventOptions = _controller$config.eventOptions,\n      windowListeners = controller.windowListeners;\n  if (!el) return;\n\n  for (var stateKey in windowListeners) {\n    var handlers = windowListeners[stateKey];\n    removeListeners(el, handlers, eventOptions);\n  }\n\n  controller.windowListeners = {};\n}\n\nfunction clearWindowListeners(_ref, stateKey) {\n  var config = _ref.config,\n      windowListeners = _ref.windowListeners;\n  if (!config.window) return;\n  removeListeners(config.window, windowListeners[stateKey], config.eventOptions);\n  delete windowListeners[stateKey];\n}\n\nfunction updateWindowListeners(_ref2, stateKey, listeners) {\n  var config = _ref2.config,\n      windowListeners = _ref2.windowListeners;\n\n  if (listeners === void 0) {\n    listeners = [];\n  }\n\n  if (!config.window) return;\n  removeListeners(config.window, windowListeners[stateKey], config.eventOptions);\n  addListeners(config.window, windowListeners[stateKey] = listeners, config.eventOptions);\n}\n\nfunction updateDomListeners(_ref3, bindings) {\n  var config = _ref3.config,\n      domListeners = _ref3.domListeners;\n  var domTarget = getDomTargetFromConfig(config);\n  if (!domTarget) throw new Error('domTarget must be defined');\n  var eventOptions = config.eventOptions;\n  removeListeners(domTarget, takeAll(domListeners), eventOptions);\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(bindings); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _Object$entries2[_i2],\n        key = _Object$entries2$_i[0],\n        fns = _Object$entries2$_i[1];\n    var name = key.slice(2).toLowerCase();\n    domListeners.push([name, chainFns.apply(void 0, fns)]);\n  }\n\n  addListeners(domTarget, domListeners, eventOptions);\n}\n\nfunction getPropsListener(_ref4, bindings) {\n  var config = _ref4.config;\n  var props = {};\n  var captureString = config.eventOptions.capture ? 'Capture' : '';\n\n  for (var _i3 = 0, _Object$entries3 = Object.entries(bindings); _i3 < _Object$entries3.length; _i3++) {\n    var _Object$entries3$_i = _Object$entries3[_i3],\n        event = _Object$entries3$_i[0],\n        fns = _Object$entries3$_i[1];\n    var fnsArray = Array.isArray(fns) ? fns : [fns];\n    var key = event + captureString;\n    props[key] = chainFns.apply(void 0, fnsArray);\n  }\n\n  return props;\n}\n\nfunction takeAll(array) {\n  if (array === void 0) {\n    array = [];\n  }\n\n  return array.splice(0, array.length);\n}\n\nfunction getDomTargetFromConfig(_ref5) {\n  var domTarget = _ref5.domTarget;\n  return domTarget && 'current' in domTarget ? domTarget.current : domTarget;\n}\n/**\r\n * bindings is an object which keys match ReactEventHandlerKeys.\r\n * Since a recognizer might want to bind a handler function to an event key already used by a previously\r\n * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\r\n * that key.\r\n */\n\n\nfunction addBindings(bindings, name, fn) {\n  if (!bindings[name]) bindings[name] = [];\n  bindings[name].push(fn);\n}\n\nfunction addListeners(el, listeners, options) {\n  if (listeners === void 0) {\n    listeners = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(listeners), _step2; !(_step2 = _iterator2()).done;) {\n    var _step2$value = _step2.value,\n        eventName = _step2$value[0],\n        eventHandler = _step2$value[1];\n    el.addEventListener(eventName, eventHandler, options);\n  }\n}\n\nfunction removeListeners(el, listeners, options) {\n  if (listeners === void 0) {\n    listeners = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(listeners), _step3; !(_step3 = _iterator3()).done;) {\n    var _step3$value = _step3.value,\n        eventName = _step3$value[0],\n        eventHandler = _step3$value[1];\n    el.removeEventListener(eventName, eventHandler, options);\n  }\n}\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/**\r\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\r\n *\r\n * @param handlers\r\n * @param classes\r\n * @param config\r\n * @param nativeHandlers - native handlers such as onClick, onMouseDown, etc.\r\n */\n\n\nfunction useRecognizers(handlers, config, nativeHandlers) {\n  if (nativeHandlers === void 0) {\n    nativeHandlers = {};\n  }\n\n  var classes = resolveClasses(handlers);\n  var controller = React.useMemo(function () {\n    return new Controller(classes);\n  }, []);\n  controller.config = config;\n  controller.handlers = handlers;\n  controller.nativeRefs = nativeHandlers;\n  React.useEffect(controller.effect, []); // @ts-ignore\n\n  if (controller.config.domTarget) return deprecationNoticeForDomTarget; // @ts-ignore\n\n  return controller.bind;\n}\n\nfunction deprecationNoticeForDomTarget() {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\"Deprecation notice: When the `domTarget` option is specified, you don't need to write `useEffect(bind, [bind])` anymore: event binding is now made handled internally to this lib.\\n\\nNext version won't return anything when `domTarget` is provided, therefore your code will break if you try to call `useEffect`.\");\n  }\n}\n\nfunction resolveClasses(internalHandlers) {\n  var classes = new Set();\n  if (internalHandlers.drag) classes.add(RecognizersMap.get('drag'));\n  if (internalHandlers.wheel) classes.add(RecognizersMap.get('wheel'));\n  if (internalHandlers.scroll) classes.add(RecognizersMap.get('scroll'));\n  if (internalHandlers.move) classes.add(RecognizersMap.get('move'));\n  if (internalHandlers.pinch) classes.add(RecognizersMap.get('pinch'));\n  if (internalHandlers.hover) classes.add(RecognizersMap.get('hover'));\n  return classes;\n}\n/**\r\n * @private\r\n * Abstract class for coordinates-based gesture recongizers\r\n */\n\n\nvar CoordinatesRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inheritsLoose(CoordinatesRecognizer, _Recognizer);\n\n  function CoordinatesRecognizer() {\n    return _Recognizer.apply(this, arguments) || this;\n  }\n\n  var _proto = CoordinatesRecognizer.prototype;\n  /**\r\n   * Returns the real movement (without taking intentionality into acount)\r\n   */\n\n  _proto.getInternalMovement = function getInternalMovement(values, state) {\n    return subV(values, state.initial);\n  }\n  /**\r\n   * In coordinates-based gesture, this function will detect the first intentional axis,\r\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\r\n   * if the first intentional axis doesn't match the specified axis in config.\r\n   */\n  ;\n\n  _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {\n    if (_intentional[0] === false && _intentional[1] === false) {\n      return {\n        _intentional: _intentional,\n        axis: this.state.axis\n      };\n    }\n\n    var _movement$map = _movement.map(Math.abs),\n        absX = _movement$map[0],\n        absY = _movement$map[1];\n\n    var axis = this.state.axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined);\n    if (!this.config.axis && !this.config.lockDirection) return {\n      _intentional: _intentional,\n      _blocked: false,\n      axis: axis\n    };\n    if (!axis) return {\n      _intentional: [false, false],\n      _blocked: false,\n      axis: axis\n    };\n    if (!!this.config.axis && axis !== this.config.axis) return {\n      _intentional: _intentional,\n      _blocked: true,\n      axis: axis\n    };\n    _intentional[axis === 'x' ? 1 : 0] = false;\n    return {\n      _intentional: _intentional,\n      _blocked: false,\n      axis: axis\n    };\n  };\n\n  _proto.getKinematics = function getKinematics(values, event) {\n    var state = this.getMovement(values);\n\n    if (!state._blocked) {\n      var dt = event.timeStamp - this.state.timeStamp;\n      Object.assign(state, calculateAllKinematics(state.movement, state.delta, dt));\n    }\n\n    return state;\n  };\n\n  _proto.mapStateValues = function mapStateValues(state) {\n    return {\n      xy: state.values,\n      vxvy: state.velocities\n    };\n  };\n\n  return CoordinatesRecognizer;\n}(Recognizer);\n\nvar WEBKIT_DISTANCE_SCALE_FACTOR = 260;\n/**\r\n * Whether the browser supports GestureEvent (ie Safari)\r\n * @returns true if the browser supports gesture event\r\n */\n\nfunction supportsGestureEvents() {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction supportsTouchEvents() {\n  return typeof window !== 'undefined' && window.ontouchstart === null;\n}\n\nfunction getTouchEvents(event) {\n  if ('touches' in event) {\n    var targetTouches = event.targetTouches,\n        changedTouches = event.changedTouches;\n    return targetTouches.length > 0 ? targetTouches : changedTouches;\n  }\n\n  return null;\n}\n\nfunction getGenericEventData(event) {\n  var buttons = 'buttons' in event ? event.buttons : 0;\n  var touchEvents = getTouchEvents(event);\n  var touches = touchEvents && touchEvents.length || 0;\n  var down = touches > 0 || buttons > 0;\n  var shiftKey = event.shiftKey,\n      altKey = event.altKey,\n      metaKey = event.metaKey,\n      ctrlKey = event.ctrlKey; // TODO check if this might create some overrides?\n\n  return {\n    touches: touches,\n    down: down,\n    buttons: buttons,\n    shiftKey: shiftKey,\n    altKey: altKey,\n    metaKey: metaKey,\n    ctrlKey: ctrlKey\n  };\n}\n/**\r\n * Gets pointer event values.\r\n * @param event\r\n * @returns pointer event values\r\n */\n\n\nfunction getPointerEventValues(event) {\n  var touchEvents = getTouchEvents(event);\n\n  var _ref = touchEvents ? touchEvents[0] : event,\n      clientX = _ref.clientX,\n      clientY = _ref.clientY;\n\n  return [clientX, clientY];\n}\n/**\r\n * Gets scroll event values\r\n * @param event\r\n * @returns scroll event values\r\n */\n\n\nfunction getScrollEventValues(event) {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  var _event$currentTarget = event.currentTarget,\n      scrollX = _event$currentTarget.scrollX,\n      scrollY = _event$currentTarget.scrollY,\n      scrollLeft = _event$currentTarget.scrollLeft,\n      scrollTop = _event$currentTarget.scrollTop;\n  return [scrollX || scrollLeft || 0, scrollY || scrollTop || 0];\n}\n/**\r\n * Gets wheel event values.\r\n * @param event\r\n * @returns wheel event values\r\n */\n\n\nfunction getWheelEventValues(event) {\n  var deltaX = event.deltaX,\n      deltaY = event.deltaY; //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n\n  return [deltaX, deltaY];\n}\n/**\r\n * Gets webkit gesture event values.\r\n * @param event\r\n * @returns webkit gesture event values\r\n */\n\n\nfunction getWebkitGestureEventValues(event) {\n  return [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation];\n}\n/**\r\n * Gets two touches event data\r\n * @param event\r\n * @returns two touches event data\r\n */\n\n\nfunction getTwoTouchesEventData(event) {\n  var _e$rotation;\n\n  var targetTouches = event.targetTouches;\n  var A = targetTouches[0],\n      B = targetTouches[1];\n  var dx = B.clientX - A.clientX;\n  var dy = B.clientY - A.clientY;\n  var cx = (B.clientX + A.clientX) / 2;\n  var cy = (B.clientY + A.clientY) / 2;\n  var e = 'nativeEvent' in event ? event.nativeEvent : event;\n  var distance = Math.hypot(dx, dy);\n  var angle = (_e$rotation = e.rotation) != null ? _e$rotation : -(Math.atan2(dx, dy) * 180) / Math.PI;\n  var values = [distance, angle];\n  var origin = [cx, cy];\n  return {\n    values: values,\n    origin: origin\n  };\n}\n\nvar TAP_DISTANCE_THRESHOLD = 3;\nvar SWIPE_MAX_ELAPSED_TIME = 220;\n\nvar DragRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(DragRecognizer, _CoordinatesRecognize);\n\n  function DragRecognizer() {\n    var _this;\n\n    _this = _CoordinatesRecognize.apply(this, arguments) || this;\n    _this.ingKey = 'dragging';\n    _this.stateKey = 'drag';\n    /**\r\n     * TODO add back when setPointerCapture is widely wupported\r\n     * https://caniuse.com/#search=setPointerCapture\r\n     * private setPointers = (event: UseGestureEvent<PointerEvent>) => {\r\n     *   const { currentTarget, pointerId } = event\r\n     *   if (currentTarget) currentTarget.setPointerCapture(pointerId)\r\n     *   this.updateGestureState({ currentTarget, pointerId })\r\n     * }\r\n            * private removePointers = () => {\r\n     *   const { currentTarget, pointerId } = this.state\r\n     *   if (currentTarget && pointerId) currentTarget.releasePointerCapture(pointerId)\r\n     * }\r\n     */\n\n    _this.onDragStart = function (event) {\n      if (!_this.enabled || _this.state._active) return;\n      /**\r\n       * TODO add back when setPointerCapture is widely supported\r\n       * this.setPointers(event as PointerEvent)\r\n       */\n\n      updateWindowListeners(_this.controller, _this.stateKey, [['pointermove', _this.onDragChange], ['pointerup', _this.onDragEnd], ['pointercancel', _this.onDragEnd]]); // We set the state pointerId to the event.pointerId so we can make sure\n      // that we lock the drag to the event initiating the gesture\n\n      _this.updateGestureState({\n        _pointerId: event.pointerId\n      });\n\n      if (_this.config.delay > 0) {\n        _this.state._delayedEvent = true; // If it's a React SyntheticEvent we need to persist it so that we can use it async\n\n        if ('persist' in event && typeof event.persist === 'function') event.persist();\n\n        _this.setTimeout(_this.startDrag.bind(_assertThisInitialized(_this)), _this.config.delay, event);\n      } else {\n        _this.startDrag(event);\n      }\n    };\n\n    _this.onDragChange = function (event) {\n      // If the gesture was canceled don't respond to the event.\n      if (_this.state.canceled) return; // If the event pointerId doesn't match the initiating pointerId\n      // don't respond to the event.\n\n      if (event.pointerId !== _this.state._pointerId) return; // If the gesture isn't active then respond to the event only if\n      // it's been delayed via the `delay` option, in which case start\n      // the gesture immediately.\n\n      if (!_this.state._active) {\n        if (_this.state._delayedEvent) {\n          _this.clearTimeout();\n\n          _this.startDrag(event);\n        }\n\n        return;\n      }\n\n      var genericEventData = getGenericEventData(event); // If the event doesn't have any button / touches left we should cancel\n      // the gesture. This may happen if the drag release happens outside the browser\n      // window.\n\n      if (!genericEventData.down) {\n        _this.onDragEnd(event);\n\n        return;\n      }\n\n      _this.updateSharedState(genericEventData);\n\n      var values = getPointerEventValues(event);\n\n      var kinematics = _this.getKinematics(values, event);\n\n      var genericPayload = getGenericPayload(_assertThisInitialized(_this), event); // This verifies if the drag can be assimilated to a tap by checking\n      // if the real distance of the drag (ie not accounting for the threshold) is\n      // greater than the TAP_DISTANCE_THRESHOLD.\n\n      var _isTap = _this.state._isTap;\n      var realDistance = calculateDistance(kinematics._movement);\n      if (_isTap && realDistance >= TAP_DISTANCE_THRESHOLD) _isTap = false;\n\n      _this.updateGestureState(_extends({}, genericPayload, kinematics, {\n        _isTap: _isTap\n      }));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onDragEnd = function (event) {\n      // If the event pointerId doesn't match the initiating pointerId\n      // don't respond to the event.\n      if (event.pointerId !== _this.state._pointerId) return;\n      _this.state._active = false;\n\n      _this.updateSharedState({\n        down: false,\n        buttons: 0,\n        touches: 0\n      });\n\n      var tap = _this.state._isTap;\n      var _this$state$velocitie = _this.state.velocities,\n          vx = _this$state$velocitie[0],\n          vy = _this$state$velocitie[1];\n      var _this$state$movement = _this.state.movement,\n          mx = _this$state$movement[0],\n          my = _this$state$movement[1];\n      var _this$state$_intentio = _this.state._intentional,\n          ix = _this$state$_intentio[0],\n          iy = _this$state$_intentio[1];\n      var _this$config$swipeVel = _this.config.swipeVelocity,\n          svx = _this$config$swipeVel[0],\n          svy = _this$config$swipeVel[1];\n      var _this$config$swipeDis = _this.config.swipeDistance,\n          sx = _this$config$swipeDis[0],\n          sy = _this$config$swipeDis[1];\n\n      var endState = _extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values));\n\n      var swipe = [0, 0];\n\n      if (endState.elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n        if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = sign(vx);\n        if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = sign(vy);\n      }\n\n      _this.updateGestureState(_extends({}, endState, {\n        tap: tap,\n        swipe: swipe\n      }));\n\n      _this.fireGestureHandler(tap === true);\n    };\n\n    _this.clean = function () {\n      _CoordinatesRecognize.prototype.clean.call(_assertThisInitialized(_this));\n\n      _this.state._delayedEvent = false; // can't remember if this is useful?\n\n      clearWindowListeners(_this.controller, _this.stateKey); // TODO add back when setPointerCapture is widely wupported\n      // this.removePointers()\n    };\n\n    _this.onCancel = function () {\n      if (_this.state.canceled) return;\n\n      _this.updateGestureState({\n        canceled: true\n      });\n\n      _this.state._active = false;\n\n      _this.updateSharedState({\n        down: false,\n        buttons: 0,\n        touches: 0\n      });\n\n      requestAnimationFrame(function () {\n        return _this.fireGestureHandler();\n      });\n    };\n\n    _this.onClick = function (event) {\n      if (!_this.state._isTap) event.stopPropagation();\n    };\n\n    return _this;\n  }\n\n  var _proto = DragRecognizer.prototype;\n\n  _proto.startDrag = function startDrag(event) {\n    var values = getPointerEventValues(event);\n    this.updateSharedState(getGenericEventData(event));\n    this.updateGestureState(_extends({}, getStartGestureState(this, values, event), getGenericPayload(this, event, true), {\n      _pointerId: event.pointerId,\n      cancel: this.onCancel\n    }));\n    this.updateGestureState(this.getMovement(values));\n    this.fireGestureHandler();\n  };\n\n  _proto.addBindings = function addBindings$1(bindings) {\n    addBindings(bindings, 'onPointerDown', this.onDragStart);\n\n    if (this.config.filterTaps) {\n      var handler = this.controller.config.eventOptions.capture ? 'onClick' : 'onClickCapture';\n      addBindings(bindings, handler, this.onClick);\n    } // TODO add back when setPointerCapture is widely wupported\n    // addBindings(bindings, 'onPointerMove', this.onDragChange)\n    // addBindings(bindings, 'onPointerUp', this.onDragEnd)\n    // addBindings(bindings, 'onPointerCancel', this.onDragEnd)\n\n  };\n\n  return DragRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Inlined from https://github.com/alexreardon/memoize-one\r\n */\n\n\nfunction memoizeOne(resultFn, isEqual) {\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  function memoized() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  }\n\n  return memoized;\n}\n/**\r\n * Taken from https://github.com/FormidableLabs/react-fast-compare\r\n *\r\n * Dropped comments and ArrayBuffer handling\r\n */\n\n\nfunction equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!equal(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    var it;\n\n    if (typeof Map === 'function' && a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n\n      while (!(i = it.next()).done) {\n        if (!b.has(i.value[0])) return false;\n      }\n\n      it = a.entries();\n\n      while (!(i = it.next()).done) {\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      }\n\n      return true;\n    }\n\n    if (typeof Set === 'function' && a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n\n      while (!(i = it.next()).done) {\n        if (!b.has(i.value[0])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    if (typeof Element !== 'undefined' && a instanceof Element) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (keys[i] === '_owner' && a.$$typeof) continue;\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise — NaN !== NaN → true\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nfunction isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if ((error.message || '').match(/stack|recursion/i)) {\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n\n    throw error;\n  }\n}\n/**\r\n * Drag hook.\r\n *\r\n * @param handler - the function fired every time the drag gesture updates\r\n * @param [config={}] - the config object including generic options and drag options\r\n */\n\n\nfunction useDrag(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('drag', DragRecognizer);\n  var buildDragConfig = useRef();\n\n  if (!buildDragConfig.current) {\n    buildDragConfig.current = memoizeOne(_buildDragConfig, isEqual);\n  }\n\n  return useRecognizers({\n    drag: handler\n  }, buildDragConfig.current(config));\n}\n/**\r\n * @private\r\n * Abstract class for distance/angle-based gesture recongizers\r\n */\n\n\nvar DistanceAngleRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inheritsLoose(DistanceAngleRecognizer, _Recognizer);\n\n  function DistanceAngleRecognizer() {\n    return _Recognizer.apply(this, arguments) || this;\n  }\n\n  var _proto = DistanceAngleRecognizer.prototype;\n\n  _proto.getInternalMovement = function getInternalMovement(values, state) {\n    var prev_a = state.values[1]; // not be defined if ctrl+wheel is used for zoom only\n\n    var d = values[0],\n        _values$ = values[1],\n        a = _values$ === void 0 ? prev_a : _values$;\n    var delta_a = a - prev_a;\n    var next_turns = state.turns;\n    if (Math.abs(delta_a) > 270) next_turns += sign(delta_a);\n    return subV([d, a - 360 * next_turns], state.initial);\n  };\n\n  _proto.getKinematics = function getKinematics(values, event) {\n    var state = this.getMovement(values);\n    var turns = (values[1] - state.movement[1] - this.state.initial[1]) / 360;\n    var dt = event.timeStamp - this.state.timeStamp;\n    var kinematics = calculateAllKinematics(state.movement, state.delta, dt);\n    return _extends({\n      turns: turns\n    }, state, kinematics);\n  };\n\n  _proto.mapStateValues = function mapStateValues(state) {\n    return {\n      da: state.values,\n      vdva: state.velocities\n    };\n  };\n\n  return DistanceAngleRecognizer;\n}(Recognizer);\n\nvar PinchRecognizer = /*#__PURE__*/function (_DistanceAngleRecogni) {\n  _inheritsLoose(PinchRecognizer, _DistanceAngleRecogni);\n\n  function PinchRecognizer() {\n    var _this;\n\n    _this = _DistanceAngleRecogni.apply(this, arguments) || this;\n    _this.ingKey = 'pinching';\n    _this.stateKey = 'pinch';\n\n    _this.pinchShouldStart = function (event) {\n      var _getGenericEventData = getGenericEventData(event),\n          touches = _getGenericEventData.touches;\n\n      return _this.enabled && touches === 2;\n    };\n\n    _this.onPinchStart = function (event) {\n      if (!_this.pinchShouldStart(event)) return;\n\n      var _getTwoTouchesEventDa = getTwoTouchesEventData(event),\n          values = _getTwoTouchesEventDa.values,\n          origin = _getTwoTouchesEventDa.origin;\n\n      _this.updateSharedState(getGenericEventData(event));\n\n      _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n        cancel: _this.onCancel,\n        origin: origin\n      }));\n\n      _this.updateGestureState(_this.getMovement(values));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onPinchChange = function (event) {\n      var _this$state = _this.state,\n          canceled = _this$state.canceled,\n          _active = _this$state._active;\n      if (canceled || !_active) return;\n      var genericEventData = getGenericEventData(event);\n\n      _this.updateSharedState(genericEventData);\n\n      var _getTwoTouchesEventDa2 = getTwoTouchesEventData(event),\n          values = _getTwoTouchesEventDa2.values,\n          origin = _getTwoTouchesEventDa2.origin; // @ts-ignore\n\n\n      var kinematics = _this.getKinematics(values, event);\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {\n        origin: origin\n      }));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onPinchEnd = function (event) {\n      if (!_this.state.active) return;\n      _this.state._active = false;\n\n      _this.updateSharedState({\n        down: false,\n        touches: 0\n      });\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values)));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onCancel = function () {\n      if (_this.state.canceled) return;\n      _this.state._active = false;\n\n      _this.updateGestureState({\n        canceled: true\n      });\n\n      _this.updateSharedState({\n        down: false,\n        touches: 0\n      });\n\n      requestAnimationFrame(function () {\n        return _this.fireGestureHandler();\n      });\n    };\n    /**\r\n     * PINCH WITH WEBKIT GESTURES\r\n     */\n\n\n    _this.onGestureStart = function (event) {\n      if (!_this.enabled) return;\n      event.preventDefault(); // useless\n\n      var values = getWebkitGestureEventValues(event);\n\n      _this.updateSharedState(getGenericEventData(event));\n\n      _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n        origin: [event.clientX, event.clientY],\n        cancel: _this.onCancel\n      }));\n\n      _this.updateGestureState(_this.getMovement(values));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onGestureChange = function (event) {\n      var _this$state2 = _this.state,\n          canceled = _this$state2.canceled,\n          _active = _this$state2._active;\n      if (canceled || !_active) return;\n      event.preventDefault();\n      var genericEventData = getGenericEventData(event);\n\n      _this.updateSharedState(genericEventData);\n\n      var values = getWebkitGestureEventValues(event);\n\n      var kinematics = _this.getKinematics(values, event);\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {\n        origin: [event.clientX, event.clientY]\n      }));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onGestureEnd = function (event) {\n      event.preventDefault();\n      if (!_this.state.active) return;\n      _this.state._active = false;\n\n      _this.updateSharedState({\n        down: false,\n        touches: 0\n      });\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values), {\n        origin: [event.clientX, event.clientY]\n      }));\n\n      _this.fireGestureHandler();\n    };\n    /**\r\n     * PINCH WITH WHEEL\r\n     */\n\n\n    _this.wheelShouldRun = function (event) {\n      return _this.enabled && event.ctrlKey;\n    };\n\n    _this.getWheelValuesFromEvent = function (event) {\n      var _getWheelEventValues = getWheelEventValues(event),\n          delta_d = _getWheelEventValues[1];\n\n      var _this$state$values = _this.state.values,\n          prev_d = _this$state$values[0],\n          prev_a = _this$state$values[1];\n      var d = prev_d - delta_d;\n      var a = prev_a !== void 0 ? prev_a : 0;\n      return {\n        values: [d, a],\n        origin: [event.clientX, event.clientY],\n        delta: [0, delta_d]\n      };\n    };\n\n    _this.onWheel = function (event) {\n      if (!_this.wheelShouldRun(event)) return;\n\n      _this.setTimeout(_this.onWheelEnd);\n\n      if (!_this.state._active) _this.onWheelStart(event);else _this.onWheelChange(event);\n    };\n\n    _this.onWheelStart = function (event) {\n      var _this$getWheelValuesF = _this.getWheelValuesFromEvent(event),\n          values = _this$getWheelValuesF.values,\n          delta = _this$getWheelValuesF.delta,\n          origin = _this$getWheelValuesF.origin;\n\n      if (event.cancelable) event.preventDefault();else if (process.env.NODE_ENV === 'development') {\n        console.warn('To properly support zoom on trackpads, try using the `domTarget` option and `config.eventOptions.passive` set to `false`. This message will only appear in development mode.');\n      }\n\n      _this.updateSharedState(getGenericEventData(event));\n\n      _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n        initial: _this.state.values,\n        offset: values,\n        delta: delta,\n        origin: origin\n      }));\n\n      _this.updateGestureState(_this.getMovement(values));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onWheelChange = function (event) {\n      _this.updateSharedState(getGenericEventData(event));\n\n      var _this$getWheelValuesF2 = _this.getWheelValuesFromEvent(event),\n          values = _this$getWheelValuesF2.values,\n          origin = _this$getWheelValuesF2.origin,\n          delta = _this$getWheelValuesF2.delta;\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event), {\n        origin: origin,\n        delta: delta\n      }));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onWheelEnd = function () {\n      _this.state._active = false;\n\n      _this.updateGestureState(_this.getMovement(_this.state.values));\n\n      _this.fireGestureHandler();\n    };\n\n    return _this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.addBindings = function addBindings$1(bindings) {\n    // Only try to use gesture events when they are supported and domTarget is set\n    // as React doesn't support gesture handlers.\n    if (this.controller.config.domTarget && !supportsTouchEvents() && supportsGestureEvents()) {\n      addBindings(bindings, 'onGestureStart', this.onGestureStart);\n      addBindings(bindings, 'onGestureChange', this.onGestureChange);\n      addBindings(bindings, 'onGestureEnd', this.onGestureEnd);\n    } else {\n      addBindings(bindings, 'onTouchStart', this.onPinchStart);\n      addBindings(bindings, 'onTouchMove', this.onPinchChange);\n      addBindings(bindings, 'onTouchEnd', this.onPinchEnd);\n      addBindings(bindings, 'onTouchCancel', this.onPinchEnd);\n      addBindings(bindings, 'onWheel', this.onWheel);\n    }\n  };\n\n  return PinchRecognizer;\n}(DistanceAngleRecognizer);\n/**\r\n * Pinch hook.\r\n *\r\n * @param handler - the function fired every time the pinch gesture updates\r\n * @param [config={}] - the config object including generic options and pinch options\r\n */\n\n\nfunction usePinch(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('pinch', PinchRecognizer);\n  var buildPinchConfig = useRef();\n\n  if (!buildPinchConfig.current) {\n    buildPinchConfig.current = memoizeOne(_buildPinchConfig, isEqual);\n  }\n\n  return useRecognizers({\n    pinch: handler\n  }, buildPinchConfig.current(config));\n}\n\nvar WheelRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(WheelRecognizer, _CoordinatesRecognize);\n\n  function WheelRecognizer() {\n    var _this;\n\n    _this = _CoordinatesRecognize.apply(this, arguments) || this;\n    _this.ingKey = 'wheeling';\n    _this.stateKey = 'wheel';\n    _this.debounced = true;\n\n    _this.handleEvent = function (event) {\n      if (event.ctrlKey && 'pinch' in _this.controller.handlers) return;\n      if (!_this.enabled) return;\n\n      _this.setTimeout(_this.onEnd);\n\n      _this.updateSharedState(getGenericEventData(event));\n\n      var values = addV(getWheelEventValues(event), _this.state.values);\n\n      if (!_this.state._active) {\n        _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n          initial: _this.state.values\n        }));\n\n        var movement = _this.getMovement(values);\n\n        var geometry = calculateAllGeometry(movement.delta);\n\n        _this.updateGestureState(movement);\n\n        _this.updateGestureState(geometry);\n      } else {\n        _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n      }\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onEnd = function () {\n      var movement = _this.getMovement(_this.state.values);\n\n      _this.updateGestureState(movement);\n\n      _this.updateGestureState({\n        _active: false,\n        velocities: [0, 0],\n        velocity: 0\n      });\n\n      _this.fireGestureHandler();\n    };\n\n    return _this;\n  }\n\n  var _proto = WheelRecognizer.prototype;\n\n  _proto.addBindings = function addBindings$1(bindings) {\n    addBindings(bindings, 'onWheel', this.handleEvent);\n  };\n\n  return WheelRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Wheel hook.\r\n *\r\n * @param handler - the function fired every time the wheel gesture updates\r\n * @param the config object including generic options and wheel options\r\n */\n\n\nfunction useWheel(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('wheel', WheelRecognizer);\n  var buildWheelConfig = useRef();\n\n  if (!buildWheelConfig.current) {\n    buildWheelConfig.current = memoizeOne(_buildWheelConfig, isEqual);\n  }\n\n  return useRecognizers({\n    wheel: handler\n  }, buildWheelConfig.current(config));\n}\n\nvar MoveRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(MoveRecognizer, _CoordinatesRecognize);\n\n  function MoveRecognizer() {\n    var _this;\n\n    _this = _CoordinatesRecognize.apply(this, arguments) || this;\n    _this.ingKey = 'moving';\n    _this.stateKey = 'move';\n    _this.debounced = true;\n\n    _this.onMove = function (event) {\n      if (!_this.enabled) return;\n\n      _this.setTimeout(_this.onMoveEnd);\n\n      if (!_this.state._active) _this.onMoveStart(event);else _this.onMoveChange(event);\n    };\n\n    _this.onMoveStart = function (event) {\n      _this.updateSharedState(getGenericEventData(event));\n\n      var values = getPointerEventValues(event);\n\n      _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true)));\n\n      _this.updateGestureState(_this.getMovement(values));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onMoveChange = function (event) {\n      _this.updateSharedState(getGenericEventData(event));\n\n      var values = getPointerEventValues(event);\n\n      _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onMoveEnd = function () {\n      var values = _this.state.values;\n\n      _this.updateGestureState(_this.getMovement(values));\n\n      _this.updateGestureState({\n        velocities: [0, 0],\n        velocity: 0,\n        _active: false\n      });\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onPointerEnter = function (event) {\n      _this.controller.state.shared.hovering = true;\n      if (!_this.controller.config.enabled) return;\n\n      if (_this.controller.config.hover.enabled) {\n        var values = getPointerEventValues(event);\n\n        var state = _extends({}, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event, true), {\n          values: values,\n          active: true,\n          hovering: true\n        });\n\n        _this.controller.handlers.hover(_extends({}, state, _this.mapStateValues(state)));\n      }\n\n      if ('move' in _this.controller.handlers) _this.onMoveStart(event);\n    };\n\n    _this.onPointerLeave = function (event) {\n      _this.controller.state.shared.hovering = false;\n      if ('move' in _this.controller.handlers) _this.onMoveEnd();\n      if (!_this.controller.config.hover.enabled) return;\n      var values = getPointerEventValues(event);\n\n      var state = _extends({}, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event), {\n        values: values,\n        active: false\n      });\n\n      _this.controller.handlers.hover(_extends({}, state, _this.mapStateValues(state)));\n    };\n\n    return _this;\n  }\n\n  var _proto = MoveRecognizer.prototype;\n\n  _proto.addBindings = function addBindings$1(bindings) {\n    if ('move' in this.controller.handlers) {\n      addBindings(bindings, 'onPointerMove', this.onMove);\n    }\n\n    if ('hover' in this.controller.handlers) {\n      addBindings(bindings, 'onPointerEnter', this.onPointerEnter);\n      addBindings(bindings, 'onPointerLeave', this.onPointerLeave);\n    }\n  };\n\n  return MoveRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Move hook.\r\n *\r\n * @param handler - the function fired every time the move gesture updates\r\n * @param [config={}] - the config object including generic options and move options\r\n */\n\n\nfunction useMove(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('move', MoveRecognizer);\n  var buildMoveConfig = useRef();\n\n  if (!buildMoveConfig.current) {\n    buildMoveConfig.current = memoizeOne(_buildMoveConfig, isEqual);\n  }\n\n  return useRecognizers({\n    move: handler\n  }, buildMoveConfig.current(config));\n}\n/**\r\n * Hover hook.\r\n *\r\n * @param handler - the function fired every time the hover gesture updates\r\n * @param [config={}] - the config object including generic options and hover options\r\n */\n\n\nfunction useHover(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('hover', MoveRecognizer);\n  var buildHoverConfig = useRef();\n\n  if (!buildHoverConfig.current) {\n    buildHoverConfig.current = memoizeOne(_buildHoverConfig, isEqual);\n  }\n\n  return useRecognizers({\n    hover: handler\n  }, buildHoverConfig.current(config));\n}\n\nvar ScrollRecognizer = /*#__PURE__*/function (_CoordinatesRecognize) {\n  _inheritsLoose(ScrollRecognizer, _CoordinatesRecognize);\n\n  function ScrollRecognizer() {\n    var _this;\n\n    _this = _CoordinatesRecognize.apply(this, arguments) || this;\n    _this.ingKey = 'scrolling';\n    _this.stateKey = 'scroll';\n    _this.debounced = true;\n\n    _this.handleEvent = function (event) {\n      if (!_this.enabled) return;\n\n      _this.clearTimeout();\n\n      _this.setTimeout(_this.onEnd);\n\n      var values = getScrollEventValues(event);\n\n      _this.updateSharedState(getGenericEventData(event));\n\n      if (!_this.state._active) {\n        _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n          initial: _this.state.values\n        }));\n\n        var movementDetection = _this.getMovement(values);\n\n        var geometry = calculateAllGeometry(movementDetection.delta);\n\n        _this.updateGestureState(movementDetection);\n\n        _this.updateGestureState(geometry);\n      } else {\n        _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n      }\n\n      _this.fireGestureHandler();\n    };\n\n    _this.onEnd = function () {\n      _this.state._active = false;\n\n      _this.updateGestureState(_extends({}, _this.getMovement(_this.state.values), {\n        velocities: [0, 0],\n        velocity: 0\n      }));\n\n      _this.fireGestureHandler();\n    };\n\n    return _this;\n  }\n\n  var _proto = ScrollRecognizer.prototype;\n\n  _proto.addBindings = function addBindings$1(bindings) {\n    addBindings(bindings, 'onScroll', this.handleEvent);\n  };\n\n  return ScrollRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Scroll hook.\r\n *\r\n * @param handler - the function fired every time the scroll gesture updates\r\n * @param [config={}] - the config object including generic options and scroll options\r\n */\n\n\nfunction useScroll(handler, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  RecognizersMap.set('scroll', ScrollRecognizer);\n  var buildScrollConfig = useRef();\n\n  if (!buildScrollConfig.current) {\n    buildScrollConfig.current = memoizeOne(_buildScrollConfig, isEqual);\n  }\n\n  return useRecognizers({\n    scroll: handler\n  }, buildScrollConfig.current(config));\n}\n\nvar RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;\n\nfunction sortHandlers(handlers) {\n  var _native = {};\n  var handle = {};\n  var actions = new Set();\n\n  for (var key in handlers) {\n    if (RE_NOT_NATIVE.test(key)) {\n      actions.add(RegExp.lastMatch);\n      handle[key] = handlers[key];\n    } else {\n      _native[key] = handlers[key];\n    }\n  }\n\n  return [handle, _native, actions];\n}\n/**\r\n * @public\r\n *\r\n * The most complete gesture hook, allowing support for multiple gestures.\r\n *\r\n * @param {Handlers} handlers - an object with on[Gesture] keys containg gesture handlers\r\n * @param {UseGestureConfig} [config={}] - the full config object\r\n * @returns {(...args: any[]) => HookReturnType<Config>}\r\n */\n\n\nfunction useGesture(_handlers, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _sortHandlers = sortHandlers(_handlers),\n      handlers = _sortHandlers[0],\n      nativeHandlers = _sortHandlers[1],\n      actions = _sortHandlers[2];\n\n  RecognizersMap.set('drag', DragRecognizer);\n  RecognizersMap.set('hover', MoveRecognizer);\n  RecognizersMap.set('move', MoveRecognizer);\n  RecognizersMap.set('pinch', PinchRecognizer);\n  RecognizersMap.set('scroll', ScrollRecognizer);\n  RecognizersMap.set('wheel', WheelRecognizer);\n  var mergedConfig = buildComplexConfig(config, actions);\n  var internalHandlers = {};\n  if (actions.has('onDrag')) internalHandlers.drag = includeStartEndHandlers(handlers, 'onDrag');\n  if (actions.has('onWheel')) internalHandlers.wheel = includeStartEndHandlers(handlers, 'onWheel');\n  if (actions.has('onScroll')) internalHandlers.scroll = includeStartEndHandlers(handlers, 'onScroll');\n  if (actions.has('onMove')) internalHandlers.move = includeStartEndHandlers(handlers, 'onMove');\n  if (actions.has('onPinch')) internalHandlers.pinch = includeStartEndHandlers(handlers, 'onPinch');\n  if (actions.has('onHover')) internalHandlers.hover = handlers.onHover;\n  return useRecognizers(internalHandlers, mergedConfig, nativeHandlers);\n}\n\nfunction includeStartEndHandlers(handlers, handlerKey) {\n  var startKey = handlerKey + 'Start';\n  var endKey = handlerKey + 'End';\n\n  var fn = function fn(state) {\n    var memo = undefined;\n    if (state.first && startKey in handlers) handlers[startKey](state);\n    if (handlerKey in handlers) memo = handlers[handlerKey](state);\n    if (state.last && endKey in handlers) handlers[endKey](state);\n    return memo;\n  };\n\n  return fn;\n}\n\nexport { addV, rubberbandIfOutOfBounds, subV, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };","map":{"version":3,"sources":["../src/utils/math.ts","../src/utils/rubberband.ts","../src/utils/utils.ts","../src/utils/resolveOptionsWith.ts","../src/utils/config.ts","../src/hooks/buildConfig.ts","../src/utils/state.ts","../src/recognizers/Recognizer.ts","../src/Controller.ts","../src/hooks/useRecognizers.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/utils/event.ts","../src/recognizers/DragRecognizer.ts","../src/utils/memoize-one.ts","../src/utils/react-fast-compare.ts","../src/hooks/useDrag.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/hooks/usePinch.ts","../src/recognizers/WheelRecognizer.ts","../src/hooks/useWheel.ts","../src/recognizers/MoveRecognizer.ts","../src/hooks/useMove.ts","../src/hooks/useHover.ts","../src/recognizers/ScrollRecognizer.ts","../src/hooks/useScroll.ts","../src/hooks/useGesture.ts"],"names":["addV","v1","v2","v","subV","calculateDistance","movement","Math","calculateAllGeometry","delta","dl","alpha","direction","distance","calculateAllKinematics","dt","beta","velocity","velocities","sign","x","Number","constant","dimension","rubberband2","rubberbandIfOutOfBounds","position","min","max","minMax","rubberband","noop","chainFns","fns","fn","result","ensureVector","value","fallback","Array","assignDefault","Object","valueFn","args","resolveWith","config","resolvers","key","resolver","DEFAULT_DRAG_DELAY","DEFAULT_RUBBERBAND","DEFAULT_SWIPE_VELOCITY","DEFAULT_SWIPE_DISTANCE","InternalGestureOptionsNormalizers","threshold","enabled","triggerAllEvents","initial","InternalCoordinatesOptionsNormalizers","axis","lockDirection","bounds","left","Infinity","right","top","bottom","isBrowser","window","InternalGenericOptionsNormalizers","domTarget","undefined","eventOptions","passive","capture","InternalDistanceAngleOptionsNormalizers","distanceBounds","angleBounds","_distanceBounds","D","_angleBounds","A","InternalDragOptionsNormalizers","filterTaps","swipeVelocity","swipeDistance","delay","getInternalGenericOptions","getInternalCoordinatesOptions","getInternalDistanceAngleOptions","getInternalDragOptions","_buildMoveConfig","rest","opts","_buildHoverConfig","_buildDragConfig","_buildPinchConfig","_buildScrollConfig","_buildWheelConfig","buildComplexConfig","actions","drag","wheel","move","scroll","pinch","hover","mergedConfig","_active","_blocked","_intentional","_movement","_initial","_bounds","_lastEventType","event","intentional","values","offset","lastOffset","previous","first","last","active","timeStamp","startTime","elapsedTime","cancel","canceled","memo","getInitialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","touches","buttons","down","shiftKey","altKey","metaKey","ctrlKey","getInitial","xy","vxvy","_isTap","_delayedEvent","_pointerId","tap","swipe","da","vdva","origin","turns","RecognizersMap","Recognizer","updateSharedState","updateGestureState","ms","clearTimeout","checkIntentionality","getMovement","T","wasIntentional","prevMovement","state","M","i0","getIntentionalDisplacement","i1","intentionalityCheck","__cachedInitial","__cachedBounds","_rubberband","computeRubberband","clean","forceFlag","prev_active","next_active","newMemo","Vx","Vy","Rx","Ry","X1","X2","Y1","Y2","getGenericPayload","isStartEvent","type","getStartGestureState","recognizer","func","Controller","bindings","RecognizerClass","handler","addBindings","partial","updateDomListeners","getPropsListener","getDomTargetFromConfig","removeListeners","takeAll","clearAllWindowListeners","controller","el","windowListeners","handlers","clearWindowListeners","stateKey","updateWindowListeners","listeners","addListeners","domListeners","name","props","captureString","fnsArray","array","options","eventName","eventHandler","useRecognizers","nativeHandlers","classes","resolveClasses","React","process","console","internalHandlers","CoordinatesRecognizer","getInternalMovement","absX","absY","getKinematics","mapStateValues","WEBKIT_DISTANCE_SCALE_FACTOR","supportsGestureEvents","supportsTouchEvents","targetTouches","changedTouches","getGenericEventData","touchEvents","getTouchEvents","getPointerEventValues","clientX","clientY","getScrollEventValues","scrollX","scrollY","scrollLeft","scrollTop","currentTarget","getWheelEventValues","deltaX","deltaY","getWebkitGestureEventValues","getTwoTouchesEventData","B","dx","dy","cx","cy","e","angle","TAP_DISTANCE_THRESHOLD","SWIPE_MAX_ELAPSED_TIME","DragRecognizer","pointerId","startDrag","onCancel","genericEventData","kinematics","genericPayload","realDistance","vx","vy","mx","my","ix","iy","svx","svy","sx","sy","endState","requestAnimationFrame","memoizeOne","resultFn","isEqual","lastArgs","calledOnce","newArgs","lastThis","lastResult","a","b","length","i","equal","it","keys","error","useDrag","buildDragConfig","useRef","memoize","DistanceAngleRecognizer","prev_a","d","delta_a","next_turns","PinchRecognizer","delta_d","prev_d","usePinch","buildPinchConfig","WheelRecognizer","geometry","useWheel","buildWheelConfig","MoveRecognizer","useMove","buildMoveConfig","useHover","buildHoverConfig","ScrollRecognizer","movementDetection","useScroll","buildScrollConfig","RE_NOT_NATIVE","native","handle","RegExp","useGesture","_handlers","sortHandlers","includeStartEndHandlers","startKey","handlerKey","endKey"],"mappings":"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","sourcesContent":["// vector add\nexport function addV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v + v2[i]) as T\n}\n\n// vector substract\nexport function subV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v - v2[i]) as T\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\ninterface Kinematics {\n  velocities: number[]\n  velocity: number\n  distance: number\n  direction: number[]\n}\n\nexport function calculateAllGeometry<T extends number[]>(movement: T, delta: T = movement) {\n  const dl = calculateDistance(delta)\n\n  const alpha = dl === 0 ? 0 : 1 / dl\n\n  const direction = delta.map(v => alpha * v) as T\n  const distance = calculateDistance(movement)\n\n  return { distance, direction }\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, dt: number): Kinematics {\n  const dl = calculateDistance(delta)\n\n  const alpha = dl === 0 ? 0 : 1 / dl\n  const beta = dt === 0 ? 0 : 1 / dt\n\n  const velocity = beta * dl\n  const velocities = delta.map(v => beta * v)\n  const direction = delta.map(v => alpha * v)\n  const distance = calculateDistance(movement)\n\n  return { velocities, velocity, distance, direction }\n}\n\n/**\n * Because IE doesn't support `Math.sign` function, so we use the polyfill version of the function.\n * This polyfill function is suggested by Mozilla:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill\n * @param x target number\n */\nexport function sign(x: number) {\n  if (Math.sign) return Math.sign(x)\n  return Number(x > 0) - Number(x < 0) || +x\n}\n","function minMax(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(value, max))\n}\n\n// Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance: number, constant: number) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5)\n}\n\nfunction rubberband(distance: number, dimension: number, constant: number) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant)\n  return (distance * dimension * constant) / (dimension + constant * distance)\n}\n\nexport function rubberbandIfOutOfBounds(position: number, min: number, max: number, constant = 0.15) {\n  if (constant === 0) return minMax(position, min, max)\n  if (position < min) return -rubberband(min - position, max - min, constant) + min\n  if (position > max) return +rubberband(position - max, max - min, constant) + max\n  return position\n}\n","export function noop() {}\n\n/**\n * TODO Beware that only optimized cases are covered in tests =)\n * TODO Need to cover general case as well\n *\n * @param fns\n */\nexport function chainFns(...fns: Function[]): Function {\n  if (fns.length === 0) return noop\n  if (fns.length === 1) return fns[0]\n\n  return function (this: any) {\n    var result\n    for (let fn of fns) {\n      result = fn.apply(this, arguments) || result\n    }\n    return result\n  }\n}\n\n/**\n * Expects a simple value or 2D vector (an array with 2 elements) and\n * always returns 2D vector. If simple value is passed, returns a\n * vector with this value as both coordinates.\n *\n * @param value\n */\nexport function ensureVector<T>(value: T | [T, T] | undefined, fallback?: T | [T, T]): [T, T] {\n  if (value === undefined) {\n    if (fallback === undefined) {\n      throw new Error('Must define fallback value if undefined is expected')\n    }\n    value = fallback\n  }\n\n  if (Array.isArray(value)) return value\n  return [value, value]\n}\n\n/**\n * Helper for defining a default value\n *\n * @param value\n * @param fallback\n */\nexport function assignDefault<T extends Object>(value: Partial<T> | undefined, fallback: T): T {\n  return Object.assign({}, fallback, value || {})\n}\n\n/**\n * Resolves getters (functions) by calling them\n * If simple value is given it just passes through\n *\n * @param v\n */\nexport function valueFn<T>(v: T | ((...args: any[]) => T), ...args: any[]): T {\n  if (typeof v === 'function') {\n    // @ts-ignore\n    return v(...args)\n  } else {\n    return v\n  }\n}\n","export type Resolver = (x: any, key: string, obj: object) => any\nexport type ResolverMap = { [k: string]: Resolver | ResolverMap | boolean }\n\nexport function resolveWith<T extends { [k: string]: any }, V extends { [k: string]: any }>(\n  config: Partial<T> = {},\n  resolvers: ResolverMap\n): V {\n  const result: any = {}\n\n  for (const [key, resolver] of Object.entries(resolvers))\n    switch (typeof resolver) {\n      case 'function':\n        result[key] = resolver.call(result, config[key], key, config)\n        break\n      case 'object':\n        result[key] = resolveWith(config[key], resolver)\n        break\n      case 'boolean':\n        if (resolver) result[key] = config[key]\n        break\n    }\n\n  return result\n}\n","import { ensureVector, assignDefault, valueFn } from './utils'\nimport { resolveWith } from './resolveOptionsWith'\n\nimport {\n  GenericOptions,\n  InternalGenericOptions,\n  DragConfig,\n  GestureOptions,\n  InternalDragOptions,\n  InternalGestureOptions,\n  CoordinatesConfig,\n  InternalCoordinatesOptions,\n  DistanceAngleConfig,\n  InternalDistanceAngleOptions,\n  Vector2,\n  Bounds,\n  StateKey,\n  State,\n  CoordinatesKey,\n  DistanceAngleKey,\n} from '../types'\n\nexport const DEFAULT_DRAG_DELAY = 180\nexport const DEFAULT_RUBBERBAND = 0.15\nexport const DEFAULT_SWIPE_VELOCITY = 0.5\nexport const DEFAULT_SWIPE_DISTANCE = 60\n\nconst InternalGestureOptionsNormalizers = {\n  threshold(value: number | Vector2 = 0) {\n    return ensureVector(value)\n  },\n\n  rubberband(value: number | boolean | Vector2 = 0): Vector2 {\n    switch (value) {\n      case true:\n        return ensureVector(DEFAULT_RUBBERBAND)\n      case false:\n        return ensureVector(0)\n      default:\n        return ensureVector(value)\n    }\n  },\n\n  enabled(value = true) {\n    return value\n  },\n\n  triggerAllEvents(value = false) {\n    return value\n  },\n\n  initial(value = 0) {\n    if (typeof value === 'function') return value\n    return ensureVector(value)\n  },\n}\n\nconst InternalCoordinatesOptionsNormalizers = {\n  ...InternalGestureOptionsNormalizers,\n  axis: true,\n  lockDirection(value = false) {\n    return value\n  },\n  bounds(value: Bounds | ((state?: State) => Bounds) = {}) {\n    if (typeof value === 'function')\n      return (state?: State) => InternalCoordinatesOptionsNormalizers.bounds(value(state))\n\n    const { left = -Infinity, right = Infinity, top = -Infinity, bottom = Infinity } = value\n\n    return [\n      [left, right],\n      [top, bottom],\n    ]\n  },\n}\n\nconst isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement\n\nconst InternalGenericOptionsNormalizers = {\n  enabled(value = true) {\n    return value\n  },\n  domTarget: true,\n  window(value = isBrowser ? window : undefined) {\n    return value\n  },\n  eventOptions({ passive = true, capture = false } = {}) {\n    return { passive, capture }\n  },\n}\n\nconst InternalDistanceAngleOptionsNormalizers = {\n  ...InternalGestureOptionsNormalizers,\n\n  bounds(_value: undefined, _key: string, { distanceBounds = {}, angleBounds = {} }: any) {\n    const _distanceBounds = (state?: State) => {\n      const D = assignDefault(valueFn(distanceBounds, state), { min: -Infinity, max: Infinity })\n      return [D.min, D.max]\n    }\n\n    const _angleBounds = (state?: State) => {\n      const A = assignDefault(valueFn(angleBounds, state), { min: -Infinity, max: Infinity })\n      return [A.min, A.max]\n    }\n\n    if (typeof distanceBounds !== 'function' && typeof angleBounds !== 'function')\n      return [_distanceBounds(), _angleBounds()]\n\n    return (state?: State) => [_distanceBounds(state), _angleBounds(state)]\n  },\n}\n\nconst InternalDragOptionsNormalizers = {\n  ...InternalCoordinatesOptionsNormalizers,\n\n  threshold(\n    this: any,\n    v: number | Vector2 | undefined,\n    _k: string,\n    { filterTaps = false, lockDirection = false, axis = undefined }: any\n  ) {\n    const A = ensureVector(v, filterTaps ? 3 : lockDirection ? 1 : axis ? 1 : 0) as Vector2\n    this.filterTaps = filterTaps || A[0] + A[1] > 0\n    return A\n  },\n\n  swipeVelocity(v: number | Vector2 = DEFAULT_SWIPE_VELOCITY) {\n    return ensureVector(v)\n  },\n  swipeDistance(v: number | Vector2 = DEFAULT_SWIPE_DISTANCE) {\n    return ensureVector(v)\n  },\n\n  delay(value: number | boolean = 0) {\n    switch (value) {\n      case true:\n        return DEFAULT_DRAG_DELAY\n      case false:\n        return 0\n      default:\n        return value\n    }\n  },\n}\n\nexport function getInternalGenericOptions(config: GenericOptions = {}): InternalGenericOptions {\n  // TODO warn when passive is set to true and domTarget is undefined\n  return resolveWith<GenericOptions, InternalGenericOptions>(config, InternalGenericOptionsNormalizers)\n}\n\nexport function getInternalGestureOptions<T extends StateKey>(\n  config: GestureOptions<T> = {}\n): InternalGestureOptions<T> {\n  return resolveWith<GestureOptions<T>, InternalGestureOptions<T>>(config, InternalGestureOptionsNormalizers)\n}\n\nexport function getInternalCoordinatesOptions<T extends CoordinatesKey>(\n  config: CoordinatesConfig<T> = {}\n): InternalCoordinatesOptions<T> {\n  return resolveWith<CoordinatesConfig<T>, InternalCoordinatesOptions<T>>(config, InternalCoordinatesOptionsNormalizers)\n}\n\nexport function getInternalDistanceAngleOptions<T extends DistanceAngleKey>(\n  config: DistanceAngleConfig<T> = {}\n): InternalDistanceAngleOptions<T> {\n  return resolveWith<DistanceAngleConfig<T>, InternalDistanceAngleOptions<T>>(\n    config,\n    InternalDistanceAngleOptionsNormalizers\n  )\n}\n\nexport function getInternalDragOptions(config: DragConfig = {}): InternalDragOptions {\n  return resolveWith<DragConfig, InternalDragOptions>(config, InternalDragOptionsNormalizers)\n}\n","import {\n  InternalConfig,\n  UseMoveConfig,\n  UseHoverConfig,\n  UseDragConfig,\n  UsePinchConfig,\n  UseScrollConfig,\n  UseWheelConfig,\n} from '../types'\n\nimport {\n  getInternalGenericOptions,\n  getInternalCoordinatesOptions,\n  getInternalDragOptions,\n  getInternalDistanceAngleOptions,\n} from '../utils/config'\n\nimport { UseGestureConfig } from '../types'\n\nexport function _buildMoveConfig({ domTarget, eventOptions, window, enabled, ...rest }: UseMoveConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.move = getInternalCoordinatesOptions(rest)\n  return opts\n}\n\nexport function _buildHoverConfig({ domTarget, eventOptions, window, enabled, ...rest }: UseHoverConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.hover = { enabled: true, ...rest }\n  return opts\n}\n\nexport function _buildDragConfig({ domTarget, eventOptions, window, enabled, ...rest }: UseDragConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.drag = getInternalDragOptions(rest)\n  return opts\n}\n\nexport function _buildPinchConfig({ domTarget, eventOptions, window, enabled, ...rest }: UsePinchConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.pinch = getInternalDistanceAngleOptions(rest)\n  return opts\n}\n\nexport function _buildScrollConfig({ domTarget, eventOptions, window, enabled, ...rest }: UseScrollConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.scroll = getInternalCoordinatesOptions(rest)\n  return opts\n}\n\nexport function _buildWheelConfig({ domTarget, eventOptions, window, enabled, ...rest }: UseWheelConfig) {\n  const opts: InternalConfig = getInternalGenericOptions({ domTarget, eventOptions, window, enabled })\n  opts.wheel = getInternalCoordinatesOptions(rest)\n  return opts\n}\n\nexport function buildComplexConfig(config: UseGestureConfig = {}, actions: Set<string> = new Set()) {\n  const { drag, wheel, move, scroll, pinch, hover, eventOptions, window, domTarget, enabled } = config\n\n  const mergedConfig: InternalConfig = getInternalGenericOptions({ eventOptions, window, domTarget, enabled })\n\n  if (actions.has('onDrag')) mergedConfig.drag = getInternalDragOptions(drag)\n  if (actions.has('onWheel')) mergedConfig.wheel = getInternalCoordinatesOptions(wheel)\n  if (actions.has('onScroll')) mergedConfig.scroll = getInternalCoordinatesOptions(scroll)\n  if (actions.has('onMove')) mergedConfig.move = getInternalCoordinatesOptions(move)\n  if (actions.has('onPinch')) mergedConfig.pinch = getInternalDistanceAngleOptions(pinch)\n  if (actions.has('onHover')) mergedConfig.hover = { enabled: true, ...hover }\n\n  return mergedConfig\n}\n","import { noop } from './utils'\nimport { CommonGestureState, Coordinates, State, DistanceAngle, Vector2, DragState } from '../types'\n\nfunction getInitial<T>(mixed: T): T & CommonGestureState {\n  return {\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    _bounds: [\n      [-Infinity, Infinity],\n      [-Infinity, Infinity],\n    ],\n    _lastEventType: undefined,\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    intentional: false,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined,\n    ...mixed,\n  }\n}\n\nexport function getInitialState(): State {\n  const shared = {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  }\n\n  const drag = getInitial<DragState & Coordinates>({\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n    _isTap: true,\n    _delayedEvent: false,\n    _pointerId: undefined,\n    tap: false,\n    swipe: [0, 0],\n  })\n\n  const pinch = getInitial<DistanceAngle>({\n    da: [0, 0] as Vector2,\n    vdva: [0, 0] as Vector2,\n    // @ts-ignore origin can never be passed as undefined in userland\n    origin: undefined,\n    turns: 0,\n  })\n\n  const wheel = getInitial<Coordinates>({\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  })\n\n  const move = getInitial<Coordinates>({\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  })\n\n  const scroll = getInitial<Coordinates>({\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  })\n\n  return { shared, drag, pinch, wheel, move, scroll }\n}\n","import Controller from '../Controller'\nimport {\n  StateKey,\n  SharedGestureState,\n  IngKey,\n  InternalConfig,\n  GestureKey,\n  GestureState,\n  EventTypes,\n  PartialGestureState,\n  Vector2,\n  FullGestureState,\n  RecognizerClass,\n} from '../types'\nimport { getInitialState } from '../utils/state'\nimport { rubberbandIfOutOfBounds } from '../utils/rubberband'\nimport { subV, addV, sign } from '../utils/math'\nimport { valueFn } from '../utils/utils'\n\nexport const RecognizersMap = new Map<GestureKey, RecognizerClass>()\n\n/**\n * @private\n * Recognizer abstract class.\n */\nexport default abstract class Recognizer<T extends StateKey = StateKey> {\n  abstract readonly ingKey: IngKey // dragging, scrolling, etc.\n  protected debounced: Boolean = true\n  abstract readonly stateKey: T\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param stateKey drag, move, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(readonly controller: Controller, readonly args: any[] = []) {}\n\n  // Returns the gesture config\n  get config(): NonNullable<InternalConfig[T]> {\n    return this.controller.config[this.stateKey]!\n  }\n\n  // Is the gesture enabled\n  get enabled(): boolean {\n    return this.controller.config.enabled && this.config.enabled\n  }\n\n  // Returns the controller state for a given gesture\n  get state(): GestureState<T> {\n    return this.controller.state[this.stateKey]\n  }\n\n  // Returns the gesture handler\n  get handler() {\n    return this.controller.handlers[this.stateKey]!\n  }\n\n  // Convenience method to update the shared state\n  protected updateSharedState(sharedState: Partial<SharedGestureState> | null) {\n    Object.assign(this.controller.state.shared, sharedState)\n  }\n\n  // Convenience method to update the gesture state\n  protected updateGestureState(gestureState: PartialGestureState<T> | null) {\n    Object.assign(this.state, gestureState)\n  }\n\n  // Convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // Convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  protected abstract getKinematics(values: Vector2, event: React.UIEvent | UIEvent): PartialGestureState<T>\n  protected abstract getInternalMovement(values: Vector2, state: GestureState<T>): Vector2\n  protected abstract mapStateValues(state: GestureState<T>): Omit<PartialGestureState<T>, 'event'>\n\n  public abstract addBindings(bindings: any): void\n\n  /**\n   * Returns state properties depending on the movement and state.\n   *\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\n   * below.\n   */\n  protected checkIntentionality(\n    _intentional: [false | number, false | number],\n    _movement: Vector2\n  ): PartialGestureState<T> {\n    return { _intentional, _blocked: false } as PartialGestureState<T>\n  }\n\n  /**\n   * Returns basic movement properties for the gesture based on the next values and current state.\n   */\n  protected getMovement(values: Vector2): PartialGestureState<T> {\n    const { initial, bounds, rubberband, threshold: T } = this.config\n\n    const { _bounds, _initial, _active, _intentional: wasIntentional, lastOffset, movement: prevMovement } = this.state\n    const M = this.getInternalMovement(values, this.state)\n\n    const i0 = wasIntentional[0] === false ? getIntentionalDisplacement(M[0], T[0]) : wasIntentional[0]\n    const i1 = wasIntentional[1] === false ? getIntentionalDisplacement(M[1], T[1]) : wasIntentional[1]\n\n    // Get gesture specific state properties based on intentionality and movement.\n    const intentionalityCheck = this.checkIntentionality([i0, i1], M)\n    if (intentionalityCheck._blocked) {\n      return { ...intentionalityCheck, _movement: M, delta: [0, 0] }\n    }\n\n    const _intentional = intentionalityCheck._intentional!\n    const _movement = M\n\n    let __cachedBounds\n    let __cachedInitial\n\n    if (_intentional[0] !== false && wasIntentional[0] === false) {\n      __cachedInitial = valueFn(initial, this.state)\n      __cachedBounds = valueFn(bounds, this.state)\n      _initial[0] = __cachedInitial[0]\n      _bounds[0] = __cachedBounds[0]\n    }\n    if (_intentional[1] !== false && wasIntentional[1] === false) {\n      __cachedInitial = __cachedInitial ?? valueFn(initial, this.state)\n      __cachedBounds = __cachedBounds ?? valueFn(bounds, this.state)\n      _initial[1] = __cachedInitial[1]\n      _bounds[1] = __cachedBounds[1]\n    }\n\n    /**\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\n     * It is calculated from the actual movement minus the threshold.\n     */\n    let movement: Vector2 = [\n      _intentional[0] !== false ? M[0] - _intentional[0] : _initial[0],\n      _intentional[1] !== false ? M[1] - _intentional[1] : _initial[1],\n    ]\n\n    const offset = addV(movement, lastOffset)\n\n    /**\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\n     * and offset can return within their bounds.\n     */\n    const _rubberband: Vector2 = _active ? rubberband : [0, 0]\n    movement = computeRubberband(_bounds, addV(movement, _initial), _rubberband)\n\n    return {\n      ...intentionalityCheck,\n      intentional: _intentional[0] !== false || _intentional[1] !== false,\n      _initial,\n      _movement,\n      movement,\n      values,\n      offset: computeRubberband(_bounds, offset, _rubberband),\n      delta: subV(movement, prevMovement),\n    } as PartialGestureState<T>\n  }\n\n  // Cleans the gesture. Can be overriden by gestures.\n  protected clean() {\n    this.clearTimeout()\n  }\n\n  /**\n   * Fires the gesture handler\n   */\n  protected fireGestureHandler = (forceFlag: boolean = false): FullGestureState<T> | null => {\n    /**\n     * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\n     * clean everything and don't do anything.\n     */\n    if (this.state._blocked) {\n      // we need debounced gestures to end by themselves\n      if (!this.debounced) {\n        this.state._active = false\n        this.clean()\n      }\n      return null\n    }\n\n    // If the gesture has no intentional dimension, don't fire the handler.\n    if (!forceFlag && !this.state.intentional && !this.config.triggerAllEvents) return null\n\n    if (this.state.intentional) {\n      const prev_active = this.state.active\n      const next_active = this.state._active\n\n      this.state.active = next_active\n      this.state.first = next_active && !prev_active\n      this.state.last = prev_active && !next_active\n\n      this.controller.state.shared[this.ingKey] = next_active // Sets dragging, pinching, etc. to the gesture active state\n    }\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.mapStateValues(this.state), // Sets xy or da to the gesture state values\n    } as FullGestureState<T>\n\n    // @ts-ignore\n    const newMemo = this.handler(state)\n\n    // Sets memo to the returned value of the handler (unless it's not undefined)\n    this.state.memo = newMemo !== void 0 ? newMemo : this.state.memo\n\n    // Cleans the gesture when the gesture is no longer active.\n    if (!this.state._active) this.clean()\n\n    return state\n  }\n}\n\n//--------------------------------------------\n\nfunction getIntentionalDisplacement(movement: number, threshold: number): number | false {\n  if (Math.abs(movement) >= threshold) {\n    return sign(movement) * threshold\n  } else {\n    return false\n  }\n}\n\nfunction computeRubberband(bounds: [Vector2, Vector2], [Vx, Vy]: Vector2, [Rx, Ry]: Vector2): Vector2 {\n  const [[X1, X2], [Y1, Y2]] = bounds\n\n  return [rubberbandIfOutOfBounds(Vx, X1, X2, Rx), rubberbandIfOutOfBounds(Vy, Y1, Y2, Ry)]\n}\n\n/**\n * Returns a generic, common payload for all gestures from an event.\n */\nexport function getGenericPayload<T extends StateKey>(\n  { state, args }: Recognizer<T>,\n  event: EventTypes[T],\n  isStartEvent?: boolean\n) {\n  const { timeStamp, type: _lastEventType } = event\n  const previous = state.values\n  const elapsedTime = isStartEvent ? 0 : timeStamp - state.startTime!\n  return { _lastEventType, event, timeStamp, elapsedTime, args, previous }\n}\n\n/**\n * Returns the reinitialized start state for the gesture.\n * Should be common to all gestures.\n */\nexport function getStartGestureState<T extends StateKey>(\n  recognizer: Recognizer<T>,\n  values: Vector2,\n  event: EventTypes[T]\n) {\n  const offset = recognizer.state.offset\n  const startTime = event.timeStamp\n\n  return {\n    ...getInitialState()[recognizer.stateKey],\n    _active: true,\n    values,\n    initial: values,\n    offset,\n    lastOffset: offset,\n    startTime,\n  }\n}\n","import {\n  StateKey,\n  State,\n  Fn,\n  ReactEventHandlerKey,\n  ReactEventHandlers,\n  InternalConfig,\n  InternalHandlers,\n  RecognizerClass,\n} from './types'\nimport { getInitialState } from './utils/state'\nimport { chainFns } from './utils/utils'\n\nfunction partial(func: Fn, state: any) {\n  return function (event: any, ...args: any) {\n    // @ts-ignore\n    return func.call(this, { ...state, event }, ...args)\n  }\n}\n\n/**\n * The controller will keep track of the state for all gestures and also keep\n * track of timeouts, and window listeners.\n */\nexport default class Controller {\n  public nativeRefs!: any\n  public config!: InternalConfig\n  public handlers!: InternalHandlers\n  public state: State // state for all gestures\n  public timeouts: { [stateKey in StateKey]?: number } // tracks timeouts of debounced gestures\n  public domListeners: [string, Fn][] // when config.domTarget is set, we attach events directly to the dom\n  public windowListeners: { [stateKey in StateKey]?: [string, Function][] } // keeps track of window listeners added by gestures (drag only at the moment)\n\n  constructor(private classes: Set<RecognizerClass>) {\n    this.state = getInitialState()\n    this.timeouts = {}\n    this.domListeners = []\n    this.windowListeners = {}\n  }\n\n  public bind = (...args: any[]) => {\n    const bindings: { [key: string]: Function[] } = {}\n\n    for (let RecognizerClass of this.classes) new RecognizerClass(this, args).addBindings(bindings)\n\n    // we also add event bindings for native handlers\n    for (let [event, handler] of Object.entries(this.nativeRefs))\n      addBindings(bindings, event, partial(handler, { ...this.state.shared, args }))\n\n    if (this.config.domTarget) {\n      // If config.domTarget is set we add event listeners to it and return the clean function.\n      return updateDomListeners(this, bindings)\n    } else {\n      // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n      return getPropsListener(this, bindings)\n    }\n  }\n\n  public effect = () => {\n    if (this.config.domTarget) this.bind()\n    return this.clean\n  }\n\n  /**\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\n   */\n  public clean = (): void => {\n    const domTarget = getDomTargetFromConfig(this.config)\n    const { eventOptions } = this.config\n    if (domTarget) removeListeners(domTarget, takeAll(this.domListeners), eventOptions)\n    Object.values(this.timeouts).forEach(clearTimeout)\n    clearAllWindowListeners(this)\n  }\n}\n\nexport function clearAllWindowListeners(controller: Controller) {\n  const {\n    config: { window: el, eventOptions },\n    windowListeners,\n  } = controller\n  if (!el) return\n\n  for (let stateKey in windowListeners) {\n    const handlers = windowListeners[stateKey as StateKey]\n    removeListeners(el, handlers, eventOptions)\n  }\n\n  controller.windowListeners = {}\n}\n\nexport function clearWindowListeners({ config, windowListeners }: Controller, stateKey: StateKey) {\n  if (!config.window) return\n  removeListeners(config.window, windowListeners[stateKey], config.eventOptions)\n  delete windowListeners[stateKey]\n}\n\nexport function updateWindowListeners(\n  { config, windowListeners }: Controller,\n  stateKey: StateKey,\n  listeners: [string, Fn][] = []\n) {\n  if (!config.window) return\n  removeListeners(config.window, windowListeners[stateKey], config.eventOptions)\n  addListeners(config.window, (windowListeners[stateKey] = listeners), config.eventOptions)\n}\n\nfunction updateDomListeners({ config, domListeners }: Controller, bindings: { [key: string]: Function[] }) {\n  const domTarget = getDomTargetFromConfig(config)\n  if (!domTarget) throw new Error('domTarget must be defined')\n  const { eventOptions } = config\n\n  removeListeners(domTarget, takeAll(domListeners), eventOptions)\n\n  for (let [key, fns] of Object.entries(bindings)) {\n    const name = key.slice(2).toLowerCase()\n    domListeners.push([name, chainFns(...fns)])\n  }\n\n  addListeners(domTarget, domListeners, eventOptions)\n}\n\nfunction getPropsListener({ config }: Controller, bindings: { [key: string]: Function[] }) {\n  const props: ReactEventHandlers = {}\n  const captureString = config.eventOptions.capture ? 'Capture' : ''\n  for (let [event, fns] of Object.entries(bindings)) {\n    const fnsArray = Array.isArray(fns) ? fns : [fns]\n    const key = (event + captureString) as ReactEventHandlerKey\n    props[key] = chainFns(...(fnsArray as Fn[]))\n  }\n  return props\n}\n\nfunction takeAll<T>(array: Array<T> = []) {\n  return array.splice(0, array.length)\n}\n\nfunction getDomTargetFromConfig({ domTarget }: InternalConfig) {\n  return domTarget && 'current' in domTarget ? domTarget.current : domTarget\n}\n\n/**\n * bindings is an object which keys match ReactEventHandlerKeys.\n * Since a recognizer might want to bind a handler function to an event key already used by a previously\n * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n * that key.\n */\nexport function addBindings(bindings: any, name: string, fn: Fn): void {\n  if (!bindings[name]) bindings[name] = []\n  bindings[name]!.push(fn)\n}\n\nfunction addListeners(el: EventTarget, listeners: Array<[string, Fn]> = [], options = {}) {\n  for (let [eventName, eventHandler] of listeners) {\n    el.addEventListener(eventName, eventHandler, options)\n  }\n}\n\nfunction removeListeners(el: EventTarget, listeners: Array<[string, Fn]> = [], options = {}) {\n  for (let [eventName, eventHandler] of listeners) {\n    el.removeEventListener(eventName, eventHandler, options)\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from 'react'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport Controller from '../Controller'\nimport {\n  InternalConfig,\n  HookReturnType,\n  InternalHandlers,\n  GenericOptions,\n  RecognizerClass,\n  NativeHandlers,\n} from '../types'\n\n/**\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\n *\n * @param handlers\n * @param classes\n * @param config\n * @param nativeHandlers - native handlers such as onClick, onMouseDown, etc.\n */\nexport default function useRecognizers<Config extends Partial<GenericOptions>>(\n  handlers: Partial<InternalHandlers>,\n  config: InternalConfig,\n  nativeHandlers: Partial<NativeHandlers> = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const classes = resolveClasses(handlers)\n\n  const controller = React.useMemo(() => new Controller(classes), [])\n  controller!.config = config\n  controller!.handlers = handlers\n  controller!.nativeRefs = nativeHandlers\n\n  React.useEffect(controller.effect, [])\n\n  // @ts-ignore\n  if (controller.config.domTarget) return deprecationNoticeForDomTarget\n  // @ts-ignore\n  return controller.bind\n}\n\nfunction deprecationNoticeForDomTarget() {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\n      `Deprecation notice: When the \\`domTarget\\` option is specified, you don't need to write \\`useEffect(bind, [bind])\\` anymore: event binding is now made handled internally to this lib.\\n\\nNext version won't return anything when \\`domTarget\\` is provided, therefore your code will break if you try to call \\`useEffect\\`.`\n    )\n  }\n}\n\nfunction resolveClasses(internalHandlers: Partial<InternalHandlers>) {\n  const classes = new Set<RecognizerClass>()\n\n  if (internalHandlers.drag) classes.add(RecognizersMap.get('drag')!)\n  if (internalHandlers.wheel) classes.add(RecognizersMap.get('wheel')!)\n  if (internalHandlers.scroll) classes.add(RecognizersMap.get('scroll')!)\n  if (internalHandlers.move) classes.add(RecognizersMap.get('move')!)\n  if (internalHandlers.pinch) classes.add(RecognizersMap.get('pinch')!)\n  if (internalHandlers.hover) classes.add(RecognizersMap.get('hover')!)\n\n  return classes\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, subV } from '../utils/math'\nimport { Vector2, PartialGestureState, GestureState, CoordinatesKey } from '../types'\n\n/**\n * @private\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer<T extends CoordinatesKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement(values: Vector2, state: GestureState<T>): Vector2 {\n    return subV(values, state.initial)\n  }\n\n  /**\n   * In coordinates-based gesture, this function will detect the first intentional axis,\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\n   * if the first intentional axis doesn't match the specified axis in config.\n   */\n  protected checkIntentionality(\n    _intentional: [false | number, false | number],\n    _movement: Vector2\n  ): PartialGestureState<T> {\n    if (_intentional[0] === false && _intentional[1] === false) {\n      return { _intentional, axis: this.state.axis } as PartialGestureState<T>\n    }\n    const [absX, absY] = _movement.map(Math.abs)\n    const axis = this.state.axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined)\n    if (!this.config.axis && !this.config.lockDirection) return { _intentional, _blocked: false, axis } as any\n    if (!axis) return { _intentional: [false, false], _blocked: false, axis } as any\n    if (!!this.config.axis && axis !== this.config.axis) return { _intentional, _blocked: true, axis } as any\n    _intentional![axis === 'x' ? 1 : 0] = false\n    return { _intentional, _blocked: false, axis } as any\n  }\n\n  getKinematics(values: Vector2, event: React.UIEvent | UIEvent): PartialGestureState<T> {\n    const state = this.getMovement(values)\n    if (!state._blocked) {\n      const dt = event.timeStamp - this.state.timeStamp!\n      Object.assign(state, calculateAllKinematics(state.movement!, state.delta!, dt))\n    }\n    return state\n  }\n\n  protected mapStateValues(state: GestureState<T>): Omit<PartialGestureState<T>, 'event'> {\n    return { xy: state.values, vxvy: state.velocities } as Omit<PartialGestureState<T>, 'event'>\n  }\n}\n","import { Vector2, WebKitGestureEvent, DomEvents } from '../types'\n\nconst WEBKIT_DISTANCE_SCALE_FACTOR = 260\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvents(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n\nexport function supportsTouchEvents(): boolean {\n  return typeof window !== 'undefined' && window.ontouchstart === null\n}\n\nfunction getTouchEvents(event: DomEvents) {\n  if ('touches' in event) {\n    const { targetTouches, changedTouches } = event\n    return targetTouches.length > 0 ? targetTouches : changedTouches\n  }\n  return null\n}\n\nexport function getGenericEventData(event: DomEvents) {\n  const buttons = 'buttons' in event ? event.buttons : 0\n  const touchEvents = getTouchEvents(event)\n  const touches = (touchEvents && touchEvents.length) || 0\n  const down = touches > 0 || buttons > 0\n\n  const { shiftKey, altKey, metaKey, ctrlKey } = event as any // TODO check if this might create some overrides?\n  return { touches, down, buttons, shiftKey, altKey, metaKey, ctrlKey }\n}\n\n/**\n * Gets pointer event values.\n * @param event\n * @returns pointer event values\n */\nexport function getPointerEventValues(\n  event: TouchEvent | React.TouchEvent | React.PointerEvent | PointerEvent\n): Vector2 {\n  const touchEvents = getTouchEvents(event)\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : (event as React.PointerEvent)\n  return [clientX, clientY]\n}\n\n/**\n * Gets scroll event values\n * @param event\n * @returns scroll event values\n */\nexport function getScrollEventValues(event: React.UIEvent | UIEvent): Vector2 {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget as Element & Window\n  return [scrollX || scrollLeft || 0, scrollY || scrollTop || 0]\n}\n\n/**\n * Gets wheel event values.\n * @param event\n * @returns wheel event values\n */\nexport function getWheelEventValues(event: React.WheelEvent | WheelEvent): Vector2 {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return [deltaX, deltaY]\n}\n\n/**\n * Gets webkit gesture event values.\n * @param event\n * @returns webkit gesture event values\n */\nexport function getWebkitGestureEventValues(event: WebKitGestureEvent): Vector2 {\n  return [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation]\n}\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent | TouchEvent) {\n  const { targetTouches } = event\n  const A = targetTouches[0],\n    B = targetTouches[1]\n\n  const dx = B.clientX - A.clientX\n  const dy = B.clientY - A.clientY\n  const cx = (B.clientX + A.clientX) / 2\n  const cy = (B.clientY + A.clientY) / 2\n\n  const e: any = 'nativeEvent' in event ? event.nativeEvent : event\n\n  const distance = Math.hypot(dx, dy)\n  const angle = (e.rotation as number) ?? -(Math.atan2(dx, dy) * 180) / Math.PI\n\n  const values: Vector2 = [distance, angle]\n  const origin: Vector2 = [cx, cy]\n\n  return { values, origin }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventValues, getGenericEventData } from '../utils/event'\nimport { calculateDistance, sign } from '../utils/math'\nimport { getStartGestureState, getGenericPayload } from './Recognizer'\nimport { addBindings, updateWindowListeners, clearWindowListeners } from '../Controller'\n\nexport const TAP_DISTANCE_THRESHOLD = 3\nexport const SWIPE_MAX_ELAPSED_TIME = 220\n\nexport class DragRecognizer extends CoordinatesRecognizer<'drag'> {\n  readonly ingKey = 'dragging'\n  readonly stateKey = 'drag'\n\n  /**\n   * TODO add back when setPointerCapture is widely wupported\n   * https://caniuse.com/#search=setPointerCapture\n   * private setPointers = (event: UseGestureEvent<PointerEvent>) => {\n   *   const { currentTarget, pointerId } = event\n   *   if (currentTarget) currentTarget.setPointerCapture(pointerId)\n   *   this.updateGestureState({ currentTarget, pointerId })\n   * }\n\n   * private removePointers = () => {\n   *   const { currentTarget, pointerId } = this.state\n   *   if (currentTarget && pointerId) currentTarget.releasePointerCapture(pointerId)\n   * }\n   */\n\n  onDragStart = (event: React.PointerEvent | PointerEvent): void => {\n    if (!this.enabled || this.state._active) return\n\n    /**\n     * TODO add back when setPointerCapture is widely supported\n     * this.setPointers(event as PointerEvent)\n     */\n\n    updateWindowListeners(this.controller, this.stateKey, [\n      ['pointermove', this.onDragChange],\n      ['pointerup', this.onDragEnd],\n      ['pointercancel', this.onDragEnd],\n    ])\n\n    // We set the state pointerId to the event.pointerId so we can make sure\n    // that we lock the drag to the event initiating the gesture\n    this.updateGestureState({ _pointerId: event.pointerId })\n\n    if (this.config.delay > 0) {\n      this.state._delayedEvent = true\n      // If it's a React SyntheticEvent we need to persist it so that we can use it async\n      if ('persist' in event && typeof event.persist === 'function') event.persist()\n      this.setTimeout(this.startDrag.bind(this), this.config.delay, event)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag(event: React.PointerEvent | PointerEvent) {\n    const values = getPointerEventValues(event)\n    this.updateSharedState(getGenericEventData(event))\n\n    this.updateGestureState({\n      ...getStartGestureState(this, values, event),\n      ...getGenericPayload(this, event, true),\n      _pointerId: event.pointerId,\n      cancel: this.onCancel,\n    })\n\n    this.updateGestureState(this.getMovement(values))\n    this.fireGestureHandler()\n  }\n\n  onDragChange = (event: PointerEvent): void => {\n    // If the gesture was canceled don't respond to the event.\n    if (this.state.canceled) return\n\n    // If the event pointerId doesn't match the initiating pointerId\n    // don't respond to the event.\n    if (event.pointerId !== this.state._pointerId) return\n\n    // If the gesture isn't active then respond to the event only if\n    // it's been delayed via the `delay` option, in which case start\n    // the gesture immediately.\n    if (!this.state._active) {\n      if (this.state._delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const genericEventData = getGenericEventData(event)\n\n    // If the event doesn't have any button / touches left we should cancel\n    // the gesture. This may happen if the drag release happens outside the browser\n    // window.\n    if (!genericEventData.down) {\n      this.onDragEnd(event)\n      return\n    }\n\n    this.updateSharedState(genericEventData)\n    const values = getPointerEventValues(event)\n\n    const kinematics = this.getKinematics(values, event)\n    const genericPayload = getGenericPayload(this, event)\n\n    // This verifies if the drag can be assimilated to a tap by checking\n    // if the real distance of the drag (ie not accounting for the threshold) is\n    // greater than the TAP_DISTANCE_THRESHOLD.\n    let { _isTap } = this.state\n    const realDistance = calculateDistance(kinematics._movement!)\n    if (_isTap && realDistance >= TAP_DISTANCE_THRESHOLD) _isTap = false\n\n    this.updateGestureState({ ...genericPayload, ...kinematics, _isTap })\n\n    this.fireGestureHandler()\n  }\n\n  onDragEnd = (event: PointerEvent): void => {\n    // If the event pointerId doesn't match the initiating pointerId\n    // don't respond to the event.\n    if (event.pointerId !== this.state._pointerId) return\n\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n\n    const tap = this.state._isTap\n    const [vx, vy] = this.state.velocities\n    const [mx, my] = this.state.movement\n    const [ix, iy] = this.state._intentional\n    const [svx, svy] = this.config.swipeVelocity\n    const [sx, sy] = this.config.swipeDistance\n\n    const endState = {\n      ...getGenericPayload(this, event),\n      ...this.getMovement(this.state.values),\n    }\n\n    const swipe: [number, number] = [0, 0]\n\n    if (endState.elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n      if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = sign(vx)\n      if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = sign(vy)\n    }\n\n    this.updateGestureState({ ...endState, tap, swipe })\n    this.fireGestureHandler(tap === true)\n  }\n\n  clean = (): void => {\n    super.clean()\n    this.state._delayedEvent = false // can't remember if this is useful?\n    clearWindowListeners(this.controller, this.stateKey)\n    // TODO add back when setPointerCapture is widely wupported\n    // this.removePointers()\n  }\n\n  onCancel = (): void => {\n    if (this.state.canceled) return\n    this.updateGestureState({ canceled: true })\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n\n  onClick = (event: React.UIEvent | UIEvent): void => {\n    if (!this.state._isTap) event.stopPropagation()\n  }\n\n  addBindings(bindings: any): void {\n    addBindings(bindings, 'onPointerDown', this.onDragStart)\n    if (this.config.filterTaps) {\n      const handler = this.controller.config.eventOptions.capture ? 'onClick' : 'onClickCapture'\n      addBindings(bindings, handler, this.onClick)\n    }\n\n    // TODO add back when setPointerCapture is widely wupported\n    // addBindings(bindings, 'onPointerMove', this.onDragChange)\n    // addBindings(bindings, 'onPointerUp', this.onDragEnd)\n    // addBindings(bindings, 'onPointerCancel', this.onDragEnd)\n  }\n}\n","/**\n * Inlined from https://github.com/alexreardon/memoize-one\n */\n\nexport type EqualityFn = (newArgs: any[], lastArgs: any[]) => boolean\n\nexport default function memoizeOne<ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>>(\n  resultFn: ResultFn,\n  isEqual: EqualityFn\n): ResultFn {\n  let lastThis: unknown\n  let lastArgs: unknown[] = []\n  let lastResult: ReturnType<ResultFn>\n  let calledOnce: boolean = false\n\n  function memoized(this: unknown, ...newArgs: unknown[]): ReturnType<ResultFn> {\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult\n    }\n\n    lastResult = resultFn.apply(this, newArgs)\n    calledOnce = true\n    lastThis = this\n    lastArgs = newArgs\n    return lastResult\n  }\n\n  return memoized as ResultFn\n}\n","/**\n * Taken from https://github.com/FormidableLabs/react-fast-compare\n *\n * Dropped comments and ArrayBuffer handling\n */\n\nfunction equal(a: any, b: any): boolean {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false\n\n    let length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      if (length !== b.length) return false\n      for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false\n      return true\n    }\n\n    let it\n    if (typeof Map === 'function' && a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false\n      it = a.entries()\n      while (!(i = it.next()).done) if (!b.has(i.value[0])) return false\n      it = a.entries()\n      while (!(i = it.next()).done) if (!equal(i.value[1], b.get(i.value[0]))) return false\n      return true\n    }\n\n    if (typeof Set === 'function' && a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false\n      it = a.entries()\n      while (!(i = it.next()).done) if (!b.has(i.value[0])) return false\n      return true\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf()\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    if (typeof Element !== 'undefined' && a instanceof Element) return false\n\n    for (i = length; i-- !== 0; ) {\n      if (keys[i] === '_owner' && a.$$typeof) continue\n      if (!equal(a[keys[i]], b[keys[i]])) return false\n    }\n    return true\n  }\n\n  // true if both NaN, false otherwise — NaN !== NaN → true\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n\nexport default function isEqual(a: any, b: any) {\n  try {\n    return equal(a, b)\n  } catch (error) {\n    if ((error.message || '').match(/stack|recursion/i)) {\n      console.warn('react-fast-compare cannot handle circular refs')\n      return false\n    }\n    throw error\n  }\n}\n","import { UseDragConfig, Handler, EventTypes } from '../types'\nimport { _buildDragConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { DragRecognizer } from '../recognizers/DragRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Drag hook.\n *\n * @param handler - the function fired every time the drag gesture updates\n * @param [config={}] - the config object including generic options and drag options\n */\nexport function useDrag<K = EventTypes['drag']>(handler: Handler<'drag', K>, config: UseDragConfig | {} = {}) {\n  RecognizersMap.set('drag', DragRecognizer)\n  const buildDragConfig = useRef<any>()\n  if (!buildDragConfig.current) {\n    buildDragConfig.current = memoize(_buildDragConfig, isEqual)\n  }\n  return useRecognizers<UseDragConfig>({ drag: handler }, buildDragConfig.current(config))\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, sign, subV } from '../utils/math'\nimport { Vector2, PartialGestureState, DistanceAngleKey, GestureState } from '../types'\n\n/**\n * @private\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer<T extends DistanceAngleKey> extends Recognizer<T> {\n  protected getInternalMovement(values: [number, number?], state: GestureState<T>): Vector2 {\n    const prev_a = state.values[1]\n    // not be defined if ctrl+wheel is used for zoom only\n    let [d, a = prev_a] = values\n\n    let delta_a = a - prev_a\n    let next_turns = state.turns\n    if (Math.abs(delta_a) > 270) next_turns += sign(delta_a)\n    return subV([d, a - 360 * next_turns], state.initial)\n  }\n\n  getKinematics(values: Vector2, event: React.UIEvent | UIEvent): PartialGestureState<T> {\n    const state = this.getMovement(values)\n    const turns = (values[1] - state.movement![1] - this.state.initial[1]) / 360\n    const dt = event.timeStamp - this.state.timeStamp!\n    const kinematics = calculateAllKinematics(state.movement!, state.delta!, dt)\n    return { turns, ...state, ...kinematics }\n  }\n\n  protected mapStateValues(state: GestureState<T>): Omit<PartialGestureState<T>, 'event'> {\n    return { da: state.values, vdva: state.velocities } as Omit<PartialGestureState<T>, 'event'>\n  }\n}\n\n/**\n * @param dangle is a small change of variable on \"lifting\" of the circle.\n * It's expected to be small and cannot be greater than 270 or under -270\n */\nexport function fixContinuity(dangle: number) {\n  dangle -= Math.round(dangle / 360) * 360\n  if (dangle > 270) return dangle - 360\n  if (dangle < -270) return dangle + 360\n  return dangle\n}\n","import DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { Vector2, WebKitGestureEvent } from '../types'\nimport {\n  getGenericEventData,\n  getTwoTouchesEventData,\n  getWheelEventValues,\n  supportsGestureEvents,\n  getWebkitGestureEventValues,\n  supportsTouchEvents,\n} from '../utils/event'\nimport { getStartGestureState, getGenericPayload } from './Recognizer'\nimport { addBindings } from '../Controller'\n\nexport class PinchRecognizer extends DistanceAngleRecognizer<'pinch'> {\n  readonly ingKey = 'pinching'\n  readonly stateKey = 'pinch'\n\n  private pinchShouldStart = (event: React.TouchEvent | TouchEvent) => {\n    const { touches } = getGenericEventData(event)\n    return this.enabled && touches === 2\n  }\n\n  onPinchStart = (event: React.TouchEvent | TouchEvent) => {\n    if (!this.pinchShouldStart(event)) return\n\n    const { values, origin } = getTwoTouchesEventData(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    this.updateGestureState({\n      // TODO remove after type update\n      // @ts-ignore\n      ...getStartGestureState(this, values, event),\n      // @ts-ignore\n      ...getGenericPayload(this, event, true),\n      cancel: this.onCancel,\n      origin,\n    })\n\n    this.updateGestureState(this.getMovement(values))\n    this.fireGestureHandler()\n  }\n\n  onPinchChange = (event: React.TouchEvent | TouchEvent): void => {\n    const { canceled, _active } = this.state\n    if (canceled || !_active) return\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values, origin } = getTwoTouchesEventData(event)\n    // @ts-ignore\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      // @ts-ignore\n      ...getGenericPayload(this, event),\n      ...kinematics,\n      origin,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onPinchEnd = (event: React.TouchEvent | TouchEvent): void => {\n    if (!this.state.active) return\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      // @ts-ignore\n      ...getGenericPayload(this, event),\n      ...this.getMovement(this.state.values),\n    })\n    this.fireGestureHandler()\n  }\n\n  onCancel = (): void => {\n    if (this.state.canceled) return\n    this.state._active = false\n    this.updateGestureState({ canceled: true })\n    this.updateSharedState({ down: false, touches: 0 })\n\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n  /**\n   * PINCH WITH WEBKIT GESTURES\n   */\n\n  onGestureStart = (event: WebKitGestureEvent): void => {\n    if (!this.enabled) return\n    event.preventDefault() // useless\n\n    const values = getWebkitGestureEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    this.updateGestureState({\n      ...getStartGestureState(this, values, event),\n      ...getGenericPayload(this, event, true),\n      origin: [event.clientX, event.clientY] as Vector2, // only used on dekstop\n      cancel: this.onCancel,\n    })\n\n    this.updateGestureState(this.getMovement(values))\n    this.fireGestureHandler()\n  }\n\n  onGestureChange = (event: WebKitGestureEvent): void => {\n    const { canceled, _active } = this.state\n    if (canceled || !_active) return\n\n    event.preventDefault()\n\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const values = getWebkitGestureEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...getGenericPayload(this, event),\n      ...kinematics,\n      origin: [event.clientX, event.clientY] as Vector2, // only used on dekstop\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onGestureEnd = (event: WebKitGestureEvent): void => {\n    event.preventDefault()\n    if (!this.state.active) return\n    this.state._active = false\n    this.updateSharedState({ down: false, touches: 0 })\n\n    this.updateGestureState({\n      ...getGenericPayload(this, event),\n      ...this.getMovement(this.state.values),\n      origin: [event.clientX, event.clientY] as Vector2, // only used on dekstop\n    })\n    this.fireGestureHandler()\n  }\n\n  /**\n   * PINCH WITH WHEEL\n   */\n  private wheelShouldRun = (event: React.WheelEvent | WheelEvent) => {\n    return this.enabled && event.ctrlKey\n  }\n\n  private getWheelValuesFromEvent = (event: React.WheelEvent | WheelEvent) => {\n    const [, delta_d] = getWheelEventValues(event)\n    const {\n      values: [prev_d, prev_a],\n    } = this.state\n    const d = prev_d - delta_d\n    const a = prev_a !== void 0 ? prev_a : 0\n\n    return {\n      values: [d, a] as Vector2,\n      origin: [event.clientX, event.clientY] as Vector2,\n      delta: [0, delta_d] as Vector2,\n    }\n  }\n\n  onWheel = (event: React.WheelEvent | WheelEvent): void => {\n    if (!this.wheelShouldRun(event)) return\n    this.setTimeout(this.onWheelEnd)\n\n    if (!this.state._active) this.onWheelStart(event)\n    else this.onWheelChange(event)\n  }\n\n  onWheelStart = (event: React.WheelEvent | WheelEvent): void => {\n    const { values, delta, origin } = this.getWheelValuesFromEvent(event)\n\n    if (event.cancelable) event.preventDefault()\n    else if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'To properly support zoom on trackpads, try using the `domTarget` option and `config.eventOptions.passive` set to `false`. This message will only appear in development mode.'\n      )\n    }\n\n    this.updateSharedState(getGenericEventData(event))\n\n    this.updateGestureState({\n      ...getStartGestureState(this, values, event),\n      ...getGenericPayload(this, event, true),\n      initial: this.state.values,\n      offset: values,\n      delta,\n      origin,\n    })\n\n    this.updateGestureState(this.getMovement(values))\n    this.fireGestureHandler()\n  }\n\n  onWheelChange = (event: React.WheelEvent | WheelEvent): void => {\n    this.updateSharedState(getGenericEventData(event))\n\n    const { values, origin, delta } = this.getWheelValuesFromEvent(event)\n\n    this.updateGestureState({\n      ...getGenericPayload(this, event),\n      ...this.getKinematics(values, event),\n      origin,\n      delta,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onWheelEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState(this.getMovement(this.state.values))\n    this.fireGestureHandler()\n  }\n\n  addBindings(bindings: any): void {\n    // Only try to use gesture events when they are supported and domTarget is set\n    // as React doesn't support gesture handlers.\n    if (this.controller.config.domTarget && !supportsTouchEvents() && supportsGestureEvents()) {\n      addBindings(bindings, 'onGestureStart', this.onGestureStart)\n      addBindings(bindings, 'onGestureChange', this.onGestureChange)\n      addBindings(bindings, 'onGestureEnd', this.onGestureEnd)\n    } else {\n      addBindings(bindings, 'onTouchStart', this.onPinchStart)\n      addBindings(bindings, 'onTouchMove', this.onPinchChange)\n      addBindings(bindings, 'onTouchEnd', this.onPinchEnd)\n      addBindings(bindings, 'onTouchCancel', this.onPinchEnd)\n      addBindings(bindings, 'onWheel', this.onWheel)\n    }\n  }\n}\n","import { UsePinchConfig, Handler, EventTypes } from '../types'\nimport { _buildPinchConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { PinchRecognizer } from '../recognizers/PinchRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Pinch hook.\n *\n * @param handler - the function fired every time the pinch gesture updates\n * @param [config={}] - the config object including generic options and pinch options\n */\nexport function usePinch<K = EventTypes['pinch']>(handler: Handler<'pinch', K>, config: UsePinchConfig | {} = {}) {\n  RecognizersMap.set('pinch', PinchRecognizer)\n  const buildPinchConfig = useRef<any>()\n  if (!buildPinchConfig.current) {\n    buildPinchConfig.current = memoize(_buildPinchConfig, isEqual)\n  }\n  return useRecognizers<UsePinchConfig>({ pinch: handler }, buildPinchConfig.current(config))\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getWheelEventValues, getGenericEventData } from '../utils/event'\nimport { addV, calculateAllGeometry } from '../utils/math'\nimport { getStartGestureState, getGenericPayload } from './Recognizer'\nimport { addBindings } from '../Controller'\n\nexport class WheelRecognizer extends CoordinatesRecognizer<'wheel'> {\n  readonly ingKey = 'wheeling'\n  readonly stateKey = 'wheel'\n  debounced = true\n\n  handleEvent = (event: React.WheelEvent | WheelEvent): void => {\n    if (event.ctrlKey && 'pinch' in this.controller.handlers) return\n    if (!this.enabled) return\n\n    this.setTimeout(this.onEnd)\n    this.updateSharedState(getGenericEventData(event))\n\n    const values = addV(getWheelEventValues(event), this.state.values)\n\n    if (!this.state._active) {\n      this.updateGestureState({\n        ...getStartGestureState(this, values, event),\n        ...getGenericPayload(this, event, true),\n        initial: this.state.values,\n      })\n\n      const movement = this.getMovement(values)\n      const geometry = calculateAllGeometry(movement.delta!)\n\n      this.updateGestureState(movement)\n      this.updateGestureState(geometry)\n    } else {\n      this.updateGestureState({\n        ...getGenericPayload(this, event),\n        ...this.getKinematics(values, event),\n      })\n    }\n\n    this.fireGestureHandler()\n  }\n\n  onEnd = (): void => {\n    const movement = this.getMovement(this.state.values)\n    this.updateGestureState(movement)\n    this.updateGestureState({ _active: false, velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(bindings: any): void {\n    addBindings(bindings, 'onWheel', this.handleEvent)\n  }\n}","import { UseWheelConfig, Handler, EventTypes } from '../types'\nimport { _buildWheelConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { WheelRecognizer } from '../recognizers/WheelRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Wheel hook.\n *\n * @param handler - the function fired every time the wheel gesture updates\n * @param the config object including generic options and wheel options\n */\nexport function useWheel<K = EventTypes['wheel']>(handler: Handler<'wheel', K>, config: UseWheelConfig | {} = {}) {\n  RecognizersMap.set('wheel', WheelRecognizer)\n  const buildWheelConfig = useRef<any>()\n  if (!buildWheelConfig.current) {\n    buildWheelConfig.current = memoize(_buildWheelConfig, isEqual)\n  }\n  return useRecognizers<UseWheelConfig>({ wheel: handler }, buildWheelConfig.current(config))\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getGenericEventData, getPointerEventValues } from '../utils/event'\nimport { getStartGestureState, getGenericPayload } from './Recognizer'\nimport { addBindings } from '../Controller'\n\nexport class MoveRecognizer extends CoordinatesRecognizer<'move'> {\n  readonly ingKey = 'moving'\n  readonly stateKey = 'move'\n\n  debounced = true\n\n  onMove = (event: React.PointerEvent | PointerEvent): void => {\n    if (!this.enabled) return\n    this.setTimeout(this.onMoveEnd)\n\n    if (!this.state._active) this.onMoveStart(event)\n    else this.onMoveChange(event)\n  }\n\n  onMoveStart = (event: React.PointerEvent | PointerEvent): void => {\n    this.updateSharedState(getGenericEventData(event))\n    const values = getPointerEventValues(event)\n\n    this.updateGestureState({\n      ...getStartGestureState(this, values, event),\n      ...getGenericPayload(this, event, true),\n    })\n\n    this.updateGestureState(this.getMovement(values))\n    this.fireGestureHandler()\n  }\n\n  onMoveChange = (event: React.PointerEvent | PointerEvent): void => {\n    this.updateSharedState(getGenericEventData(event))\n    const values = getPointerEventValues(event)\n\n    this.updateGestureState({\n      ...getGenericPayload(this, event),\n      ...this.getKinematics(values, event),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onMoveEnd = (): void => {\n    const values = this.state.values\n    this.updateGestureState(this.getMovement(values))\n    this.updateGestureState({ velocities: [0, 0], velocity: 0, _active: false })\n    this.fireGestureHandler()\n  }\n\n  onPointerEnter = (event: React.PointerEvent | PointerEvent): void => {\n    this.controller.state.shared.hovering = true\n    if (!this.controller.config.enabled) return\n\n    if (this.controller.config.hover!.enabled) {\n      const values = getPointerEventValues(event)\n\n      const state = {\n        ...this.controller.state.shared,\n        ...this.state,\n        ...getGenericPayload(this, event, true),\n        values,\n        active: true,\n        hovering: true,\n      }\n\n      this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n    }\n\n    if ('move' in this.controller.handlers) this.onMoveStart(event)\n  }\n\n  onPointerLeave = (event: React.PointerEvent | PointerEvent): void => {\n    this.controller.state.shared.hovering = false\n    if ('move' in this.controller.handlers) this.onMoveEnd()\n    if (!this.controller.config.hover!.enabled) return\n\n    const values = getPointerEventValues(event)\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...getGenericPayload(this, event),\n      values,\n      active: false,\n    }\n\n    this.controller.handlers.hover!({ ...state, ...this.mapStateValues(state) })\n  }\n\n  addBindings(bindings: any): void {\n    if ('move' in this.controller.handlers) {\n      addBindings(bindings, 'onPointerMove', this.onMove)\n    }\n    if ('hover' in this.controller.handlers) {\n      addBindings(bindings, 'onPointerEnter', this.onPointerEnter)\n      addBindings(bindings, 'onPointerLeave', this.onPointerLeave)\n    }\n  }\n}\n","import { UseMoveConfig, Handler, EventTypes } from '../types'\nimport { _buildMoveConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { MoveRecognizer } from '../recognizers/MoveRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Move hook.\n *\n * @param handler - the function fired every time the move gesture updates\n * @param [config={}] - the config object including generic options and move options\n */\nexport function useMove<K = EventTypes['move']>(handler: Handler<'move', K>, config: UseMoveConfig | {} = {}) {\n  RecognizersMap.set('move', MoveRecognizer)\n  const buildMoveConfig = useRef<any>()\n  if (!buildMoveConfig.current) {\n    buildMoveConfig.current = memoize(_buildMoveConfig, isEqual)\n  }\n  return useRecognizers<UseMoveConfig>({ move: handler }, buildMoveConfig.current(config))\n}\n","import { Handler, UseHoverConfig, EventTypes } from '../types'\nimport { _buildHoverConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { MoveRecognizer } from '../recognizers/MoveRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Hover hook.\n *\n * @param handler - the function fired every time the hover gesture updates\n * @param [config={}] - the config object including generic options and hover options\n */\nexport function useHover<K = EventTypes['hover']>(handler: Handler<'hover', K>, config: UseHoverConfig | {} = {}) {\n  RecognizersMap.set('hover', MoveRecognizer)\n  const buildHoverConfig = useRef<any>()\n  if (!buildHoverConfig.current) {\n    buildHoverConfig.current = memoize(_buildHoverConfig, isEqual)\n  }\n  return useRecognizers<UseHoverConfig>({ hover: handler }, buildHoverConfig.current(config))\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getGenericEventData, getScrollEventValues } from '../utils/event'\nimport { calculateAllGeometry } from '../utils/math'\nimport { getStartGestureState, getGenericPayload } from './Recognizer'\nimport { addBindings } from '../Controller'\n\nexport class ScrollRecognizer extends CoordinatesRecognizer<'scroll'> {\n  readonly ingKey = 'scrolling'\n  readonly stateKey = 'scroll'\n  debounced = true\n\n  handleEvent = (event: React.UIEvent | UIEvent): void => {\n    if (!this.enabled) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const values = getScrollEventValues(event)\n    this.updateSharedState(getGenericEventData(event))\n\n    if (!this.state._active) {\n      this.updateGestureState({\n        ...getStartGestureState(this, values, event),\n        ...getGenericPayload(this, event, true),\n        initial: this.state.values,\n      })\n\n      const movementDetection = this.getMovement(values)\n      const geometry = calculateAllGeometry(movementDetection.delta!)\n\n      this.updateGestureState(movementDetection)\n      this.updateGestureState(geometry)\n    } else {\n      this.updateGestureState({\n        ...getGenericPayload(this, event),\n        ...this.getKinematics(values, event),\n      })\n    }\n\n    this.fireGestureHandler()\n  }\n\n  onEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(bindings: any): void {\n    addBindings(bindings, 'onScroll', this.handleEvent)\n  }\n}\n\n\n","import { UseScrollConfig, Handler, EventTypes } from '../types'\nimport { _buildScrollConfig } from './buildConfig'\nimport useRecognizers from './useRecognizers'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { ScrollRecognizer } from '../recognizers/ScrollRecognizer'\nimport memoize from '../utils/memoize-one'\nimport isEqual from '../utils/react-fast-compare'\nimport { useRef } from 'react'\n\n/**\n * Scroll hook.\n *\n * @param handler - the function fired every time the scroll gesture updates\n * @param [config={}] - the config object including generic options and scroll options\n */\nexport function useScroll<K = EventTypes['scroll']>(handler: Handler<'scroll', K>, config: UseScrollConfig | {} = {}) {\n  RecognizersMap.set('scroll', ScrollRecognizer)\n  const buildScrollConfig = useRef<any>()\n  if (!buildScrollConfig.current) {\n    buildScrollConfig.current = memoize(_buildScrollConfig, isEqual)\n  }\n  return useRecognizers<UseScrollConfig>({ scroll: handler }, buildScrollConfig.current(config))\n}\n","import useRecognizers from './useRecognizers'\nimport { buildComplexConfig } from './buildConfig'\nimport {\n  InternalConfig,\n  InternalHandlers,\n  UserHandlers,\n  UseGestureConfig,\n  Handlers,\n  EventTypes,\n  AnyGestureEventTypes,\n} from '../types'\nimport { RecognizersMap } from '../recognizers/Recognizer'\nimport { DragRecognizer } from '../recognizers/DragRecognizer'\nimport { MoveRecognizer } from '../recognizers/MoveRecognizer'\nimport { PinchRecognizer } from '../recognizers/PinchRecognizer'\nimport { ScrollRecognizer } from '../recognizers/ScrollRecognizer'\nimport { WheelRecognizer } from '../recognizers/WheelRecognizer'\n\nexport function wrapStart(fn: Function) {\n  return function (this: any, { first }: any) {\n    if (first) fn.apply(this, arguments)\n  }\n}\n\nexport function wrapEnd(fn: Function) {\n  return function (this: any, { last }: any) {\n    if (last) fn.apply(this, arguments)\n  }\n}\n\nconst RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/\n\nfunction sortHandlers(handlers: object) {\n  const native: any = {}\n  const handle: any = {}\n  const actions = new Set()\n\n  for (let key in handlers) {\n    if (RE_NOT_NATIVE.test(key)) {\n      actions.add(RegExp.lastMatch)\n      handle[key] = (handlers as any)[key]\n    } else {\n      native[key] = (handlers as any)[key]\n    }\n  }\n\n  return [handle, native, actions]\n}\n\n/**\n * @public\n *\n * The most complete gesture hook, allowing support for multiple gestures.\n *\n * @param {Handlers} handlers - an object with on[Gesture] keys containg gesture handlers\n * @param {UseGestureConfig} [config={}] - the full config object\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useGesture<T extends AnyGestureEventTypes = EventTypes>(\n  _handlers: Handlers<T>,\n  config: UseGestureConfig = {}\n) {\n  const [handlers, nativeHandlers, actions] = sortHandlers(_handlers)\n\n  RecognizersMap.set('drag', DragRecognizer)\n  RecognizersMap.set('hover', MoveRecognizer)\n  RecognizersMap.set('move', MoveRecognizer)\n  RecognizersMap.set('pinch', PinchRecognizer)\n  RecognizersMap.set('scroll', ScrollRecognizer)\n  RecognizersMap.set('wheel', WheelRecognizer)\n\n  const mergedConfig: InternalConfig = buildComplexConfig(config, actions)\n  const internalHandlers: Partial<InternalHandlers> = {}\n\n  if (actions.has('onDrag')) internalHandlers.drag = includeStartEndHandlers(handlers, 'onDrag')\n  if (actions.has('onWheel')) internalHandlers.wheel = includeStartEndHandlers(handlers, 'onWheel')\n  if (actions.has('onScroll')) internalHandlers.scroll = includeStartEndHandlers(handlers, 'onScroll')\n  if (actions.has('onMove')) internalHandlers.move = includeStartEndHandlers(handlers, 'onMove')\n  if (actions.has('onPinch')) internalHandlers.pinch = includeStartEndHandlers(handlers, 'onPinch')\n  if (actions.has('onHover')) internalHandlers.hover = handlers.onHover\n\n  return useRecognizers<UseGestureConfig>(internalHandlers, mergedConfig, nativeHandlers)\n}\n\n/**\n * @private\n *\n * This utility function will integrate start and end handlers into the regular\n * handler function by using first and last conditions.\n *\n * @param {UserHandlersPartial} handlers - the handlers function object\n * @param {HandlerKey} handlerKey - the key for which to integrate start and end handlers\n * @returns\n */\ntype HandlerKey = 'onDrag' | 'onPinch' | 'onWheel' | 'onMove' | 'onScroll' | 'onHover'\nfunction includeStartEndHandlers(handlers: Partial<UserHandlers>, handlerKey: HandlerKey) {\n  const startKey = (handlerKey + 'Start') as keyof UserHandlers\n  const endKey = (handlerKey + 'End') as keyof UserHandlers\n\n  const fn = (state: any) => {\n    let memo: any = undefined\n    if (state.first && startKey in handlers) handlers[startKey]!(state)\n    if (handlerKey in handlers) memo = handlers[handlerKey]!(state)\n    if (state.last && endKey in handlers) handlers[endKey]!(state)\n    return memo\n  }\n  return fn\n}\n"]},"metadata":{},"sourceType":"module"}